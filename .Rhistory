xml_set_attr("kind", row$direction) %>% xml_set_attr("mult", as.character(row$multiplicity))
}
#' Repair a PNPRO file by regenerating from scratch
#'
#' Constructs a new `.PNPRO` Petri net XML using:
#'  - validated `issues` and `arc_df` CSVs
#'  - original `<project>` metadata (title, measures)
#'  - bacterial_models metadata (abbr ↔ model.txt mapping)
#'  - shared metabolites list
#'
#' @param pnpro_path        Path to original `.PNPRO`
#' @param bacterial_models  List of lists, each with `$abbr`, `$FBAmodel`
#' @param metabolite_places Character vector of shared metabolite places
#' @param log_dir           Directory with `<base>_issues.csv` & `<base>_arc_df.csv`
#' @param out_path          Output path for new repaired `.PNPRO`
#' @return Invisibly TRUE if successful
repair_pnpro <- function(pnpro_path,
bacterial_models,
metabolite_places = character(),
log_dir = "net/validation_logs",
out_path = NULL) {
library(xml2)
library(dplyr)
library(readr)
base <- tools::file_path_sans_ext(basename(pnpro_path))
issues <- read_csv(file.path(log_dir, paste0(base, "_issues.csv")), show_col_types = FALSE)
arc_df <- read_csv(file.path(log_dir, paste0(base, "_arc_df.csv")), show_col_types = FALSE)
# parse original
doc_orig <- read_xml(pnpro_path)
proj_node <- xml_find_first(doc_orig, "/project")
proj_attrs <- as.list(xml_attrs(proj_node))
gspn_node <- xml_find_first(proj_node, "./gspn")
gspn_attrs <- as.list(xml_attrs(gspn_node))
measures_node <- xml_find_first(proj_node, "./measures")
if (is.null(out_path)) {
out_path <- file.path(dirname(pnpro_path), paste0(base, "_repaired.PNPRO"))
}
# build new doc
new_doc <- xml_new_root("project")
# set project attrs
for (nm in names(proj_attrs)) xml_set_attr(new_doc, nm, proj_attrs[[nm]])
# add gspn
new_gspn <- xml_add_child(new_doc, "gspn")
for (nm in names(gspn_attrs)) xml_set_attr(new_gspn, nm, gspn_attrs[[nm]])
# nodes
nodes <- xml_add_child(new_gspn, "nodes")
# shared metabolites
for (met in metabolite_places) {
node <- xml_add_child(nodes, "place")
xml_set_attr(node, "name", met)
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(node, "label-x", "0.0")
xml_set_attr(node, "label-y", "0.0")
}
# bacterial places
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
for (pfx in c(paste0("n_",abbr), paste0("biomass_e_",abbr))) {
node <- xml_add_child(nodes, "place")
xml_set_attr(node, "name", pfx)
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(node, "label-x", "0.0")
xml_set_attr(node, "label-y", "0.0")
}
}
# required transitions
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
reqs <- c(
paste0("Starv_",abbr), paste0("Death_",abbr), paste0("Dup_",abbr),
paste0("EX_biomass_e_in_",abbr), paste0("EX_biomass_e_out_",abbr)
)
for (tr in reqs) {
node <- xml_add_child(nodes, "transition")
xml_set_attr(node, "name", tr)
xml_set_attr(node, "type", "EXP")
xml_set_attr(node, "rotation", "0.0")
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(no
#' Repair a PNPRO file by regenerating from scratch
#'
#' Constructs a new `.PNPRO` Petri net XML using:
#'  - validated `issues` and `arc_df` CSVs
#'  - original `<project>` metadata (title, measures)
#'  - bacterial_models metadata (abbr ↔ model.txt mapping)
#'  - shared metabolites list
#'
#' @param pnpro_path        Path to original `.PNPRO`
#' @param bacterial_models  List of lists, each with `$abbr`, `$FBAmodel`
#' @param metabolite_places Character vector of shared metabolite places
#' @param log_dir           Directory with `<base>_issues.csv` & `<base>_arc_df.csv`
#' @param out_path          Output path for new repaired `.PNPRO`
#' @return Invisibly TRUE if successful
repair_pnpro <- function(pnpro_path,
base <- tools::file_path_sans_ext(basename(pnpro_path))
issues <- read_csv(file.path(log_dir, paste0(base, "_issues.csv")), show_col_types = FALSE)
arc_df <- read_csv(file.path(log_dir, paste0(base, "_arc_df.csv")), show_col_types = FALSE)
# parse original
doc_orig <- read_xml(pnpro_path)
proj_node <- xml_find_first(doc_orig, "/project")
proj_attrs <- as.list(xml_attrs(proj_node))
gspn_node <- xml_find_first(proj_node, "./gspn")
gspn_attrs <- as.list(xml_attrs(gspn_node))
measures_node <- xml_find_first(proj_node, "./measures")
if (is.null(out_path)) {
out_path <- file.path(dirname(pnpro_path), paste0(base, "_repaired.PNPRO"))
}
# build new doc
new_doc <- xml_new_root("project")
# set project attrs
for (nm in names(proj_attrs)) xml_set_attr(new_doc, nm, proj_attrs[[nm]])
# add gspn
new_gspn <- xml_add_child(new_doc, "gspn")
for (nm in names(gspn_attrs)) xml_set_attr(new_gspn, nm, gspn_attrs[[nm]])
# nodes
nodes <- xml_add_child(new_gspn, "nodes")
# shared metabolites
for (met in metabolite_places) {
node <- xml_add_child(nodes, "place")
xml_set_attr(node, "name", met)
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(node, "label-x", "0.0")
xml_set_attr(node, "label-y", "0.0")
}
# bacterial places
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
for (pfx in c(paste0("n_",abbr), paste0("biomass_e_",abbr))) {
node <- xml_add_child(nodes, "place")
xml_set_attr(node, "name", pfx)
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(node, "label-x", "0.0")
xml_set_attr(node, "label-y", "0.0")
}
}
# required transitions
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
reqs <- c(
paste0("Starv_",abbr), paste0("Death_",abbr), paste0("Dup_",abbr),
paste0("EX_biomass_e_in_",abbr), paste0("EX_biomass_e_out_",abbr)
)
for (tr in reqs) {
node <- xml_add_child(nodes, "transition")
xml_set_attr(node, "name", tr)
xml_set_attr(node, "type", "EXP")
xml_set_attr(node, "rotation", "0.0")
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(node, "delay", "0")
}
}
# FBA/Call transitions not in required list
for (tr in unique(arc_df$transition)) {
exists <- xml_find_first(nodes, paste0(".//transition[@name='", tr, "']"))
if (is.na(exists)) {
cmd <- unique(arc_df$command[arc_df$transition==tr])
node <- xml_add_child(nodes, "transition")
xml_set_attr(node, "name", tr)
xml_set_attr(node, "type", "EXP")
xml_set_attr(node, "rotation", "0.0")
xml_set_attr(node, "x", "0.0")
xml_set_attr(node, "y", "0.0")
xml_set_attr(node, "delay", cmd)
}
}
# preserve measures
xml_add_child(new_doc, measures_node)
# edges
edges <- xml_add_child(new_gspn, "edges")
apply(arc_df, 1, function(row) {
row <- as.list(row)
head <- if (row$direction=="INPUT") row$transition else row$place
tail <- if (row$direction=="INPUT") row$place else row$transition
arc_node <- xml_add_child(edges, "arc")
xml_set_attr(arc_node, "head", head)
xml_set_attr(arc_node, "tail", tail)
xml_set_attr(arc_node, "kind", row$direction)
xml_set_attr(arc_node, "mult", as.character(row$multiplicity))
})
# write out
write_xml(new_doc, out_path, options = c("format", "no_declaration"))
invisible(TRUE)
library(xml2)
library(dplyr)
library(readr)
# derive base filename
base <- tools::file_path_sans_ext(basename(pnpro_path))
issues  <- read_csv(file.path(log_dir, paste0(base, '_issues.csv')), show_col_types = FALSE)
arc_df  <- read_csv(file.path(log_dir, paste0(base, '_arc_df.csv')), show_col_types = FALSE)
# parse original PNPRO for metadata
doc_orig    <- read_xml(pnpro_path)
proj_node   <- xml_find_first(doc_orig, '/project')
proj_attrs  <- xml_attrs(proj_node)
gspn_node   <- xml_find_first(proj_node, './gspn')
gspn_attrs  <- xml_attrs(gspn_node)
measures    <- xml_find_first(proj_node, './measures')
# determine output path
if (is.null(out_path)) {
out_path <- file.path(dirname(pnpro_path), paste0(base, '_repaired.PNPRO'))
}
# build new document
new_doc <- xml_new_root('project')
# set project attributes
for (nm in names(proj_attrs)) xml_set_attr(new_doc, nm, proj_attrs[[nm]])
# add GSPN
new_gspn <- xml_add_child(new_doc, 'gspn')
for (nm in names(gspn_attrs)) xml_set_attr(new_gspn, nm, gspn_attrs[[nm]])
# 1) places node
nodes <- xml_add_child(new_gspn, 'nodes')
# shared metabolites
for (met in metabolite_places) {
plc <- xml_add_child(nodes, 'place')
xml_set_attrs(plc, c(name=met, x='0', y='0', 'label-x'='0', 'label-y'='0'))
}
# bacterial places (count & biomass)
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
for (pfx in c(paste0('n_',abbr), paste0('biomass_e_',abbr))) {
plc <- xml_add_child(nodes, 'place')
xml_set_attrs(plc, c(name=pfx, x='0', y='0', 'label-x'='0', 'label-y'='0'))
}
}
# 2) transitions node (pop + biomass)
required_tr <- list()
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
required_tr <- c(required_tr,
paste0('Starv_',abbr), paste0('Death_',abbr), paste0('Dup_',abbr),
paste0('EX_biomass_e_in_',abbr), paste0('EX_biomass_e_out_',abbr))
}
for (tr in unique(required_tr)) {
tnode <- xml_add_child(nodes, 'transition')
xml_set_attrs(tnode, c(name=tr, type='EXP', rotation='0', x='0', y='0', delay='0'))
}
# 3) FBA/Call transitions
for (tr in unique(arc_df$transition)) {
if (!tr %in% required_tr) {
cmd <- unique(arc_df$command[arc_df$transition==tr])
tnode <- xml_add_child(nodes, 'transition')
xml_set_attrs(tnode, c(name=tr, type='EXP', rotation='0', x='0', y='0', delay=cmd))
}
}
# 4) measures
xml_add_child(new_doc, measures)
# 5) edges
edges <- xml_add_child(new_gspn, 'edges')
apply(arc_df, 1, function(r) {
head <- if (r['direction']=='INPUT') r['transition'] else r['place']
tail <- if (r['direction']=='INPUT') r['place'] else r['transition']
arc <- xml_add_child(edges, 'arc')
xml_set_attrs(arc, c(head=head, tail=tail, kind=r['direction'], mult=as.character(r['multiplicity'])))
})
# write out without XML declaration
write_xml(new_doc, out_path, options=c('format','no_declaration'))
invisible(TRUE)
library(xml2)
library(dplyr)
library(readr)
# derive base filename
base <- tools::file_path_sans_ext(basename(pnpro_path))
issues  <- read_csv(file.path(log_dir, paste0(base, '_issues.csv')), show_col_types = FALSE)
arc_df  <- read_csv(file.path(log_dir, paste0(base, '_arc_df.csv')), show_col_types = FALSE)
# parse original for metadata
doc_orig  <- read_xml(pnpro_path)
proj_node <- xml_find_first(doc_orig, '/project')
proj_attrs<- xml_attrs(proj_node)
gspn_node <- xml_find_first(proj_node, './gspn')
gspn_attrs<- xml_attrs(gspn_node)
measures  <- xml_find_first(proj_node, './measures')
# output path default
if (is.null(out_path)) out_path <- file.path(dirname(pnpro_path), paste0(base,'_repaired.PNPRO'))
# build new tree
new_doc <- xml_new_root('project')
# set project attributes
for (nm in names(proj_attrs)) xml_set_attr(new_doc, nm, proj_attrs[[nm]])
# add gspn
new_gspn <- xml_add_child(new_doc, 'gspn')
for (nm in names(gspn_attrs)) xml_set_attr(new_gspn, nm, gspn_attrs[[nm]])
# 1) nodes
nodes <- xml_add_child(new_gspn, 'nodes')
# shared metabolites and bacterial places
for (met in metabolite_places) {
plc <- xml_add_child(nodes, 'place')
xml_set_attr(plc, 'name', met)
xml_set_attr(plc, 'x', '0.0'); xml_set_attr(plc, 'y', '0.0')
xml_set_attr(plc, 'label-x', '0.0'); xml_set_attr(plc, 'label-y', '0.0')
}
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
for (pfx in c(paste0('n_',abbr), paste0('biomass_e_',abbr))) {
plc <- xml_add_child(nodes, 'place')
xml_set_attr(plc, 'name', pfx)
xml_set_attr(plc, 'x', '0.0'); xml_set_attr(plc, 'y', '0.0')
xml_set_attr(plc, 'label-x', '0.0'); xml_set_attr(plc, 'label-y', '0.0')
}
}
# 2) transitions
# required dynamics
req <- unlist(lapply(bacterial_models, function(m) {
ab <- tolower(m$abbr)
c(paste0('Starv_',ab), paste0('Death_',ab), paste0('Dup_',ab),
paste0('EX_biomass_e_in_',ab), paste0('EX_biomass_e_out_',ab))
}))
for (tr in unique(req)) {
tnode <- xml_add_child(nodes, 'transition')
xml_set_attr(tnode,'name',tr); xml_set_attr(tnode,'type','EXP')
xml_set_attr(tnode,'rotation','0.0'); xml_set_attr(tnode,'x','0.0')
xml_set_attr(tnode,'y','0.0'); xml_set_attr(tnode,'delay','0')
}
# FBA/Call-driven
for (tr in unique(arc_df$transition)) {
if (!tr %in% req) {
cmd <- unique(arc_df$command[arc_df$transition==tr])
tnode <- xml_add_child(nodes, 'transition')
xml_set_attr(tnode,'name',tr); xml_set_attr(tnode,'type','EXP')
xml_set_attr(tnode,'rotation','0.0'); xml_set_attr(tnode,'x','0.0')
xml_set_attr(tnode,'y','0.0'); xml_set_attr(tnode,'delay',cmd)
}
}
# 3) measures
xml_add_child(new_doc, measures)
# 4) edges
edges <- xml_add_child(new_gspn, 'edges')
for (i in seq_len(nrow(arc_df))) {
r <- arc_df[i,]
head <- if (r$direction=='INPUT') r$transition else r$place
tail <- if (r$direction=='INPUT') r$place      else r$transition
arc <- xml_add_child(edges, 'arc')
xml_set_attr(arc,'head', head); xml_set_attr(arc,'tail', tail)
xml_set_attr(arc,'kind', r$direction); xml_set_attr(arc,'mult', as.character(r$multiplicity))
}
# write
write_xml(new_doc, out_path, options=c('format','no_declaration'))
invisible(TRUE)
library(xml2)
library(dplyr)
library(readr)
# derive base filename
base <- tools::file_path_sans_ext(basename(pnpro_path))
issues  <- read_csv(file.path(log_dir, paste0(base, '_issues.csv')), show_col_types = FALSE)
arc_df  <- read_csv(file.path(log_dir, paste0(base, '_arc_df.csv')), show_col_types = FALSE)
# parse original for metadata
doc_orig  <- read_xml(pnpro_path)
proj_node <- xml_find_first(doc_orig, '/project')
proj_attrs<- xml_attrs(proj_node)
gspn_node <- xml_find_first(proj_node, './gspn')
gspn_attrs<- xml_attrs(gspn_node)
measures  <- xml_find_first(proj_node, './measures')
# output path default
if (is.null(out_path)) out_path <- file.path(dirname(pnpro_path), paste0(base,'_repaired.PNPRO'))
# build new tree
new_doc <- xml_new_root('project')
# set project attributes
for (nm in names(proj_attrs)) xml_set_attr(new_doc, nm, proj_attrs[[nm]])
# add gspn
new_gspn <- xml_add_child(new_doc, 'gspn')
for (nm in names(gspn_attrs)) xml_set_attr(new_gspn, nm, gspn_attrs[[nm]])
# 1) nodes
nodes <- xml_add_child(new_gspn, 'nodes')
# shared metabolites and bacterial places
for (met in metabolite_places) {
plc <- xml_add_child(nodes, 'place')
xml_set_attr(plc, 'name', met)
xml_set_attr(plc, 'x', '0.0'); xml_set_attr(plc, 'y', '0.0')
xml_set_attr(plc, 'label-x', '0.0'); xml_set_attr(plc, 'label-y', '0.0')
}
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
for (pfx in c(paste0('n_',abbr), paste0('biomass_e_',abbr))) {
plc <- xml_add_child(nodes, 'place')
xml_set_attr(plc, 'name', pfx)
xml_set_attr(plc, 'x', '0.0'); xml_set_attr(plc, 'y', '0.0')
xml_set_attr(plc, 'label-x', '0.0'); xml_set_attr(plc, 'label-y', '0.0')
}
}
# 2) transitions
# required dynamics
req <- unlist(lapply(bacterial_models, function(m) {
ab <- tolower(m$abbr)
c(paste0('Starv_',ab), paste0('Death_',ab), paste0('Dup_',ab),
paste0('EX_biomass_e_in_',ab), paste0('EX_biomass_e_out_',ab))
}))
for (tr in unique(req)) {
tnode <- xml_add_child(nodes, 'transition')
xml_set_attr(tnode,'name',tr); xml_set_attr(tnode,'type','EXP')
xml_set_attr(tnode,'rotation','0.0'); xml_set_attr(tnode,'x','0.0')
xml_set_attr(tnode,'y','0.0'); xml_set_attr(tnode,'delay','0')
}
# FBA/Call-driven
for (tr in unique(arc_df$transition)) {
if (!tr %in% req) {
cmd <- unique(arc_df$command[arc_df$transition==tr])
tnode <- xml_add_child(nodes, 'transition')
xml_set_attr(tnode,'name',tr); xml_set_attr(tnode,'type','EXP')
xml_set_attr(tnode,'rotation','0.0'); xml_set_attr(tnode,'x','0.0')
xml_set_attr(tnode,'y','0.0'); xml_set_attr(tnode,'delay',cmd)
}
}
# 3) measures
xml_add_child(new_doc, measures)
# 4) edges
edges <- xml_add_child(new_gspn, 'edges')
for (i in seq_len(nrow(arc_df))) {
r <- arc_df[i,]
head <- if (r$direction=='INPUT') r$transition else r$place
tail <- if (r$direction=='INPUT') r$place      else r$transition
arc <- xml_add_child(edges, 'arc')
xml_set_attr(arc,'head', head); xml_set_attr(arc,'tail', tail)
xml_set_attr(arc,'kind', r$direction); xml_set_attr(arc,'k','0.0')
xml_set_attr(arc,'mult', as.character(r$multiplicity))
}
# write
write_xml(new_doc, out_path, options=c('format','no_declaration'))
invisible(TRUE)
library(xml2)
library(dplyr)
library(readr)
# derive base filename
base <- tools::file_path_sans_ext(basename(pnpro_path))
# read validation artifacts
issues <- read_csv(file.path(log_dir, paste0(base, '_issues.csv')), show_col_types = FALSE)
arc_df  <- read_csv(file.path(log_dir, paste0(base, '_arc_df.csv')),   show_col_types = FALSE)
arc_df_repaired <- read_csv(file.path(log_dir, paste0(base, '_arc_df_repaired.csv')), show_col_types = FALSE)
library(xml2); library(dplyr); library(readr); library(stringr)
# derive base filename
base <- tools::file_path_sans_ext(basename(pnpro_path))
# read original arc & issues
issues <- read_csv(file.path(log_dir, paste0(base, '_issues.csv')), show_col_types = FALSE)
arc_df  <- read_csv(file.path(log_dir, paste0(base, '_arc_df.csv')), show_col_types = FALSE)
# generate arc_df_repaired by adding back missing arcs
missing <- issues %>%
filter(section == 'Arc Connectivity' & str_detect(message, 'missing')) %>%
transmute(
transition   = object,
direction    = if_else(str_detect(message, 'INPUT'), 'INPUT', 'OUTPUT'),
place        = str_extract(message, "(?<=arc (to|from) )[A-Za-z0-9_]+"),
multiplicity = 1L,
command      = NA_character_
)
arc_df_repaired <- bind_rows(arc_df, missing) %>%
distinct(transition, direction, place, multiplicity, command)
# save for audit
write_csv(arc_df_repaired,
file.path(log_dir, paste0(base, '_arc_df_repaired.csv')))
# parse original for metadata blocks
doc_orig  <- read_xml(pnpro_path)
proj_node <- xml_find_first(doc_orig, '/project')
proj_attrs<- xml_attrs(proj_node)
gspn_node <- xml_find_first(proj_node, './gspn')
gspn_attrs<- xml_attrs(gspn_node)
measures  <- xml_find_first(proj_node, './measures')
# default output path
if (is.null(out_path)) out_path <- file.path(dirname(pnpro_path), paste0(base,'_repaired.PNPRO'))
# build new XML doc
new_doc <- xml_new_root('project')
xml_set_attrs(new_doc, proj_attrs)
new_gspn <- xml_add_child(new_doc, 'gspn')
xml_set_attrs(new_gspn, gspn_attrs)
# 1) nodes
nodes_parent <- xml_add_child(new_gspn, 'nodes')
# shared metabolites
for (met in metabolite_places) {
plc <- xml_add_child(nodes_parent, 'place')
xml_set_attrs(plc, c(name=met, x='0.0', y='0.0', 'label-x'='0.0', 'label-y'='0.0'))
}
# bacterial count/biomass places
for (m in bacterial_models) {
abbr <- tolower(m$abbr)
for (pfx in c(paste0('n_',abbr), paste0('biomass_e_',abbr))) {
plc <- xml_add_child(nodes_parent, 'place')
xml_set_attrs(plc, c(name=pfx, x='0.0', y='0.0', 'label-x'='0.0', 'label-y'='0.0'))
}
}
# 2) transitions
# dynamic population transitions
dyn_tr <- unlist(lapply(bacterial_models, function(m) {
ab <- tolower(m$abbr)
c(paste0('Starv_',ab), paste0('Death_',ab), paste0('Dup_',ab),
paste0('EX_biomass_e_in_',ab), paste0('EX_biomass_e_out_',ab))
}))
for (tr in unique(dyn_tr)) {
tnode <- xml_add_child(nodes_parent, 'transition')
xml_set_attrs(tnode, c(name=tr, type='EXP', rotation='0.0', x='0.0', y='0.0', delay='0'))
}
# FBA/Call-driven transitions
for (tr in unique(arc_df_repaired$transition)) {
if (!tr %in% dyn_tr) {
cmd <- arc_df_repaired$command[arc_df_repaired$transition==tr][1]
tnode <- xml_add_child(nodes_parent, 'transition')
xml_set_attrs(tnode, c(name=tr, type='EXP', rotation='0.0', x='0.0', y='0.0', delay=cmd))
}
}
# 3) measures block
xml_add_child(new_doc, measures)
# 4) edges
edges_parent <- xml_add_child(new_gspn, 'edges')
apply(arc_df_repaired, 1, function(r) {
r <- as.list(r)
head <- if (r$direction=='INPUT') r$transition else r$place
tail <- if (r$direction=='INPUT') r$place      else r$transition
arc <- xml_add_child(edges_parent, 'arc')
xml_set_attrs(arc, c(head=head, tail=tail, kind=r$direction, mult=as.character(r$multiplicity)))
invisible(NULL)
})
write_xml(new_doc, out_path, options=c('format','no_declaration'))
invisible(TRUE)
