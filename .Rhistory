size = rel(0.9),
face = "bold",
margin = margin(b = 5, t = 5)
),
strip.background = element_rect(fill = "grey95", color = NA),
# Plot margins
plot.margin = margin(15, 15, 15, 15),
complete = TRUE
)
}
base_size = 12
path = paste0(hypernode_name, "_analysis")
trace_file <- list.files(path,
pattern = "\\.trace$",
full.names = TRUE)
flux_file <- list.files(path,
pattern = "\\.flux$",
full.names = TRUE)
if (length(trace_file) == 0 || length(flux_file) == 0) {
stop("No .trace or .flux files found and none provided")
}
trace <- utils::read.table(trace_file, header = TRUE) %>%
tidyr::gather(key = "Places", value = "Marking", -Time) %>%
# Convert Places to factor to maintain order
dplyr::mutate(Places = factor(Places, levels = unique(Places)))
critical_times <- trace %>%
dplyr::filter(Places == paste0("n_", fba_name) & Marking < 1) %>%
dplyr::pull(Time)
flux <- utils::read.table(flux_file, header = TRUE) %>%
tidyr::gather(key = "Reaction", value = "Flux", -Time) %>%
dplyr::mutate(Organism = fba_name) %>%
dplyr::mutate(Flux = if_else(Time %in% critical_times, 0, Flux))
flux <- utils::read.table(flux_file, header = TRUE) %>%
tidyr::gather(key = "Reaction", value = "Flux", -Time) %>%
dplyr::mutate(Organism = fba_name) %>%
dplyr::mutate(Flux = dplyr::if_else(Time %in% critical_times, 0, Flux))
# Assuming place2plot is your vector of place names to plot
variable_names <- setNames(
list(
paste0(levels(trace$Places)[1], " (cell)"),
paste0(levels(trace$Places)[2], " (pgDW)")
),
c(paste0("n_", fba_name), paste0(fba_name, "_biomass_e"))
)
p_pl <- ggplot2::ggplot(trace, ggplot2::aes(Time, Marking)) +
# Using a subtle, yet distinct line color for the primary trace
ggplot2::geom_line(linewidth = 0.8, color = "#2c7bb6") + # A clean, scientific blue
# Using slightly larger points with a softer outline and increased transparency for better visual flow
ggplot2::geom_point(size = 1.5, shape = 21, fill = "#ab9", color = "white", alpha = 0.7) + # Light blue fill, white outline
# Adding a shaded ribbon for visual emphasis of the trend, using a complementary light blue
geom_ribbon(aes(ymin = min(Marking), ymax = Marking), alpha = 0.15, fill = "#a6bddb") + # A slightly darker, muted blue for the ribbon
ggplot2::labs(title = NULL, x = "Time (h)", y = "Marking") +
ggplot2::facet_grid(Places ~ ., scales = "free_y") +
# Adopting a more refined minimal theme with adjusted base font size
theme_minimal(base_size = 14) + # Increased base font size for better readability in papers
theme(
text = element_text(color = "black", family = "Arial"), # Specify a common, professional font like Arial
plot.title = element_text(size = rel(1.3), face = "bold", hjust = 0.5, color = "#333333"), # Darker grey for title
axis.title = element_text(size = rel(1.15), face = "bold", color = "#333333"), # Darker grey for axis titles
axis.text = element_text(size = rel(1), color = "#555555"), # Softer grey for axis text
# Fine-tuning grid lines for a cleaner look
panel.grid.major = element_line(color = "gray90", linewidth = 0.1), # Slightly thicker, still subtle
panel.grid.minor = element_line(color = "gray95", linewidth = 0.25), # Slightly thicker, very subtle
# Stripping text and background for facet labels
strip.text = element_text(face = "bold", size = rel(1.05), color = "white"), # White text for better contrast
strip.background = element_rect(fill = "#5e81a6", color = NA), # A darker, professional blue for facet backgrounds
panel.spacing = unit(1.5, "lines"), # Reduced spacing slightly for a more compact look
legend.position = "bottom",
legend.title = element_text(face = "bold", color = "#333333"),
legend.text = element_text(color = "#555555"),
plot.margin = margin(t = 15, r = 15, b = 15, l = 15), # Slightly reduced margins
# Adding a subtle light grey background to the entire plot area
plot.background = element_rect(fill = "#f9f9f9", color = NA)
)
# Process the data as before
flux_filtered <- flux %>%
dplyr::filter(Reaction %in% reactions_of_interest) %>%
dplyr::mutate(
Type = ifelse(grepl("_f$", Reaction), "forward", "reverse"),
Base_Reaction = sub("_[fr]$", "", Reaction)
)
# Create list to store plots
plot_list <- list()
for(reaction in unique(sub("_[fr]$", "", reactions_of_interest))) {
message(paste("Attempting to plot for Base_Reaction:", reaction)) # Debugging message
f_data <- flux_filtered %>% dplyr::filter(Base_Reaction == reaction)
if (nrow(f_data) == 0) {
warning(paste("No data for Base_Reaction '", reaction, "'. Skipping plot.", sep = ""))
next # Skip to the next iteration of the loop
}
# --- NEW CHECK FOR FACETING VARIABLE ---
unique_facet_vars <- unique(f_data$Reaction)
if (length(unique_facet_vars) == 0 || all(is.na(unique_facet_vars))) {
warning(paste("Faceting variable 'Reaction' has no valid values for Base_Reaction '", reaction, "'. Skipping plot.", sep = ""))
next # Skip if no valid facet levels
}
# --- END NEW CHECK ---
# Get maximum y value for this reaction pair
# Use f_data directly here as it's already filtered
y_max <- f_data %>%
dplyr::pull(Flux) %>%
max(na.rm = TRUE)
# Ensure y_max is not -Inf if all values were negative or missing
if (is.infinite(y_max) && y_max < 0) {
y_max <- 0 # Or some appropriate small positive value if fluxes must be non-negative
} else if (is.na(y_max)) {
y_max <- 1 # Default to 1 if max is NA (e.g., if Flux column only had NAs)
}
# Determine minimum y value for coord_cartesian to correctly display negative fluxes if any
y_min <- f_data %>%
dplyr::pull(Flux) %>%
min(na.rm = TRUE)
# Handle cases where y_min might be infinite or NA
if (is.infinite(y_min) && y_min > 0) {
y_min <- 0 # If min is +Inf (e.g., from empty data with min=TRUE), default to 0
} else if (is.na(y_min)) {
y_min <- 0 # Default if min is NA
}
# Ensure the lower limit for coord_cartesian is 0, or below 0 if min flux is genuinely negative
lower_ylim <- min(0, y_min) # This correctly sets 0 as the lower bound unless actual data goes below 0
plot_list[[reaction]] = ggplot(f_data, aes(x = Time, y = Flux, color = Organism)) +
geom_line(linewidth = 1) +
scale_colour_manual(values = col_flux) +
coord_cartesian(ylim = c(lower_ylim, y_max)) + # Use the dynamically determined lower_ylim
labs(x = "Time (h)", y = "Flux (mmol/gDW*h)") +
facet_wrap(~Reaction, ncol = 1) +
custom_theme(base_size = base_size) +
theme(
strip.text = element_text(face = "bold"),
panel.spacing = unit(1.5, "lines"),
legend.position = "bottom"
)
}
# Combine plots using patchwork
final_plot <- patchwork::wrap_plots(plot_list, ncol = 3) +
patchwork::plot_annotation(
title = NULL,
theme = theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
)
final_plot
str(f_data)
ggplot(f_data, aes(x = Time, y = Flux, color = Organism)) +
geom_line(linewidth = 1.2, alpha = 0.8) + # Slightly thicker lines, with some transparency
# --- CORRECTED COLOR MAPPING ---
# Directly use the provided 'col_flux' vector for color values.
# This assumes 'col_flux' is a named vector where names are organism IDs,
# or an unnamed vector with enough colors for all unique organisms.
scale_colour_manual(values = col_flux) +
# --- END CORRECTED COLOR MAPPING ---
coord_cartesian(ylim = c(lower_ylim, y_max)) + # Use the dynamically determined lower_ylim
labs(x = "Time (h)", y = "Flux (mmol/gDW*h)") +
facet_wrap(~Reaction, ncol = 1, strip.position = "top") + # Place facet labels on top
# Theme adjustments for a clean, scientific look with no grid or panel borders
theme_minimal(base_size = base_size * 1.1) + # Increase base font size slightly for readability
theme(
# --- Text and Titles ---
text = element_text(color = "black", family = "Arial"), # Professional font like Arial
axis.title = element_text(color = "black", size = rel(1)), # Axis titles in black
axis.text = element_text(color = "black", size = rel(0.9)), # Axis text in black, slightly smaller
# --- Axes Lines (only) ---
axis.line = element_line(color = "black", linewidth = 0.5), # Keep axes lines prominent
axis.ticks = element_line(color = "black", linewidth = 0.5), # Keep axis ticks
# --- Remove Grid Lines and Panel/Plot Borders/Backgrounds ---
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # No background for plot panels
plot.background = element_rect(fill = "white", color = NA), # White plot background, no outer border
panel.border = element_blank(), # No internal panel borders
# --- Facet Strip Styling (labels at the top) ---
strip.text = element_text(face = "bold", size = rel(1.05), color = "black"), # Bold, clear text for strips
strip.background = element_rect(fill = "gray95", color = "black", linewidth = 0.2), # Light background, thin border for strips
# --- Spacing and Legend ---
panel.spacing = unit(0.75, "lines"), # Reduced spacing between panels
legend.position = "bottom", # Legend below the plot
legend.title = element_text(face = "bold", size = rel(1)), # Bold legend title
legend.text = element_text(size = rel(0.9)), # Legend text size
plot.margin = margin(t = 10, r = 10, b = 10, l = 10) # Overall plot margins
)
ggplot(f_data, aes(x = Time, y = Flux, color = Organism)) +
geom_line(linewidth = 1.5, alpha = 0.9) + # Make lines slightly thicker and more opaque
scale_colour_manual(values = col_flux) + # Use your defined col_flux
coord_cartesian(ylim = c(lower_ylim, y_max)) + # Use the dynamically determined lower_ylim
labs(x = "Time (h)", y = "Flux (mmol/gDW*h)") +
facet_wrap(~Reaction, ncol = 1, strip.position = "top") + # Place facet labels on top
# --- Start of Theme Overhaul for Minimalist Style ---
theme_void() + # Start with a completely blank theme
theme(
# Reintroduce and style axis lines
axis.line = element_line(color = "black", linewidth = 0.8), # Thicker, dark axis lines
axis.line.x = element_line(color = "black", linewidth = 0.8), # Ensure X axis is thick
axis.line.y = element_line(color = "black", linewidth = 0.8), # Ensure Y axis is thick
# Reintroduce and style axis ticks
axis.ticks = element_line(color = "black", linewidth = 0.5), # Standard tick lines
axis.ticks.length = unit(0.2, "cm"), # Adjust tick length for prominence
# Reintroduce and style axis text
axis.text.x = element_text(color = "black", size = rel(0.9), margin = margin(t = 5)), # X-axis text, slightly offset from line
axis.text.y = element_text(color = "black", size = rel(0.9), margin = margin(r = 5)), # Y-axis text, slightly offset from line
# Reintroduce and style axis titles
axis.title.x = element_text(color = "black", size = rel(1), face = "plain", margin = margin(t = 10)), # X-axis title, bold
axis.title.y = element_text(color = "black", size = rel(1), face = "plain", margin = margin(r = 10)), # Y-axis title, bold
# Facet strip styling - still needed as a "title" for each sub-plot
strip.text = element_text(face = "bold", size = rel(1.1), color = "black"), # Bold, clear text for strips
strip.background = element_rect(fill = "transparent", color = NA), # Transparent background for strips, no border
# This makes the label appear floating above the axis
# Legend Styling
legend.position = "bottom",
legend.title = element_text(face = "plain", size = rel(1), color = "black"), # Plain font for legend title
legend.text = element_text(size = rel(0.9), color = "black"), # Legend text size
legend.key = element_rect(fill = "transparent", color = NA), # Transparent background for legend keys
legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
# Plot margins
plot.margin = margin(t = 10, r = 10, b = 10, l = 10)
)
# --- End of Theme Overhaul ---
Modern color palette for scientific publications
modern_colors <- c(
"#2E86AB",  # Deep blue
"#A23B72",  # Burgundy
"#F18F01",  # Amber
"#C73E1D",  # Red
"#6A994E",  # Forest green
"#7209B7",  # Purple
"#F77F00",  # Orange
"#003566"   # Navy
)
# Create the plot with modern minimalist design
ggplot(f_data, aes(x = Time, y = Flux, color = Organism)) +
geom_line(linewidth = 1.2, alpha = 0.9) +
scale_colour_manual(values = modern_colors) +
coord_cartesian(ylim = c(lower_ylim, y_max)) +
labs(
x = "Time (h)",
y = "Flux (mmol/gDW·h)",  # Using proper multiplication dot
color = "Organism"
) +
facet_wrap(~Reaction, ncol = 1) +
theme_void(base_size = base_size) +
theme(
# Axis elements - clean and prominent
axis.line = element_line(color = "black", linewidth = 0.8),
axis.text = element_text(color = "black", size = rel(0.9)),
axis.title = element_text(color = "black", size = rel(1.1), face = "bold"),
axis.title.x = element_text(margin = margin(t = 15)),
axis.title.y = element_text(margin = margin(r = 15)),
axis.ticks = element_line(color = "black", linewidth = 0.6),
axis.ticks.length = unit(0.3, "cm"),
# Facet elements - clean and modern
strip.text = element_text(
face = "bold",
size = rel(1.1),
color = "black",
margin = margin(b = 20)
),
panel.spacing = unit(2, "lines"),
# Legend - positioned for clarity
legend.position = "bottom",
legend.title = element_text(face = "bold", size = rel(1.05)),
legend.text = element_text(size = rel(0.95)),
legend.key.width = unit(1.5, "cm"),
legend.margin = margin(t = 20),
# Overall plot aesthetics
plot.margin = margin(t = 30, r = 30, b = 30, l = 30),
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
# Remove all grid lines and borders as requested
panel.grid = element_blank(),
panel.border = element_blank()
)
# Combine plots using patchwork
final_plot <- patchwork::wrap_plots(plot_list, ncol = 3) +
patchwork::plot_annotation(
title = NULL,
theme = theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
) & theme(legend.position = "bottom")
final_plot
source(file.path("src/R/plt_ana.R"))
source(file.path("src/R/plt_ana.R"))
p = plt_ana(
fba_name = "ecsk1sm",
reactions_of_interest = c(
"EX_biomass_e_f", "EX_biomass_e_r",
"EX_for_e_r", "EX_for_e_f",
"EX_but_e_r", "EX_but_e_f",
"EX_ppa_e_r", "EX_ppa_e_f",
"EX_ac_e_r", "EX_ac_e_f"))
p
source(file.path("src/R/plt_ana.R"))
p = plt_ana(
fba_name = "ecsk1sm",
reactions_of_interest = c(
"EX_biomass_e_f", "EX_biomass_e_r",
"EX_for_e_r", "EX_for_e_f",
"EX_but_e_r", "EX_but_e_f",
"EX_ppa_e_r", "EX_ppa_e_f",
"EX_ac_e_r", "EX_ac_e_f"))
p
p = plt_ana(
fba_name = "ecsk1sm",
reactions_of_interest = c(
"EX_biomass_e_f", "EX_biomass_e_r",
"EX_for_e_r", "EX_for_e_f",
"EX_glc__De_r", "EX_glc__D_e_f",
"EX_but_e_r", "EX_but_e_f",
"EX_ppa_e_r", "EX_ppa_e_f",
"EX_ac_e_r", "EX_ac_e_f"))
p = plt_ana(
fba_name = "ecsk1sm",
reactions_of_interest = c(
"EX_biomass_e_f", "EX_biomass_e_r",
"EX_for_e_r", "EX_for_e_f",
"EX_glc__D_e_r", "EX_glc__D_e_f",
"EX_but_e_r", "EX_but_e_f",
"EX_ppa_e_r", "EX_ppa_e_f",
"EX_ac_e_r", "EX_ac_e_f"))
p
p = plt_ana(
fba_name = "ecsk1sm",
reactions_of_interest = c(
"EX_biomass_e_f", "EX_biomass_e_r",
"EX_glc__D_e_r", "EX_glc__D_e_f",
"EX_for_e_r", "EX_for_e_f",
"EX_but_e_r", "EX_but_e_f",
"EX_ppa_e_r", "EX_ppa_e_f",
"EX_ac_e_r", "EX_ac_e_f"))
# -------------------------------------------------------------------------
# run.R – one-click demo for the “minimal-doublet” community
# -------------------------------------------------------------------------
if (!requireNamespace("remotes", quietly = TRUE))
install.packages("remotes")
remotes::install_github(
"qBioTurin/epimod_FBAfunctions",
ref      = "unified-epimod_FBAfunctions",
upgrade  = "never"
)
library(epimodFBAfunctions)
library(epimod)
# -------------------------------------------------------------------------
# user-editable knobs
# -------------------------------------------------------------------------
hypernode_name <- "Ec"
base_dir       <- getwd()                       # where you launch run.R
mat_dir        <- "models"                      # user *.mat* live here
cfg_yaml       <- "config/config_Ec.yaml"
bc_json        <- "config/boundary_conditions_Ec.json"
init_csv       <- "config/initial_data_Ec.csv"
overwrite_run  <- TRUE
debug_solver   <- FALSE                         # epimod::model.analysis()
# -------------------------------------------------------------------------
# 1. build the hyper-node (returns all useful sub-paths)
# -------------------------------------------------------------------------
paths <- build_hypernode(
hypernode_name           = hypernode_name,
config_yaml              = cfg_yaml,
boundary_conditions_file = bc_json,
initial_data             = init_csv,
mat_dir                  = mat_dir,
base_dir                 = base_dir,
overwrite                = overwrite_run,
debug                    = debug_solver          # passed to epimod later
)
cat("\n✔  Hyper-node ready in", fs::path_rel(fs::path_dir(paths$config), base_dir), "\n")
# -------------------------------------------------------------------------
# 2. run epimod solver
# -------------------------------------------------------------------------
net_file   <- fs::path(base_dir, "hypernodes/", hypernode_name, "petri_net/", paste0(hypernode_name, ".PNPRO"))
trans_file <- fs::path(paths$src,   paste0("general_functions_", hypernode_name, ".cpp"))
fba_files <- fs::dir_ls(paths$biounit,
recurse      = TRUE,
regexp       = "_model\\.txt$",
type         = "file")
epimod::model.generation(
net_fname        = net_file,
transitions_fname= trans_file,
fba_fname        = fba_files
)
# -------------------------------------------------------------------------
# 3. move the solver artefacts into hypernodes/<name>/gen/
# -------------------------------------------------------------------------
solver_suffixes <- c(".solver", ".def", ".fbainfo", ".net", ".PlaceTransition")
fs::dir_create(paths$gen)        # already created inside build_hypernode(), but harmless
purrr::walk(solver_suffixes, function(ext) {
src <- fs::path(base_dir, paste0(hypernode_name, ext))
if (fs::file_exists(src)) {
fs::file_move(src, paths$gen)
message("✓ moved ", fs::path_file(src))
} else {
warning("solver file not found: ", src)
}
})
# -------------------------------------------------------------------------
# 4. analyse the simulation
# -------------------------------------------------------------------------
epimod::model.analysis(
solver_fname     = fs::path(paths$gen, paste0(hypernode_name, ".solver")),
parameters_fname = fs::path(paths$config, "initial_data_Ec.csv"),
functions_fname  = fs::path(paths$src,   paste0("functions_", hypernode_name, ".R")),
debug            = debug_solver,
i_time = 0, f_time = 24, s_time = 0.25,
atol  = 1e-6, rtol = 1e-6,
fba_fname = fba_files,
user_files = c(
fs::path(paths$config, "population_parameters.csv"),
fs::path(paths$gen,    paste0(hypernode_name, ".fbainfo")),
fs::path(paths$output, "ub_bounds_projected.csv"),
fs::path(paths$output, "ub_bounds_not_projected.csv")
)
)
cat("\n🎉 All results gathered in", fs::path_rel(paths$gen, base_dir), "\n")
source(file.path("src/R/plt_ana.R"))
p = plt_ana(
fba_name = "ecsk1sm",
reactions_of_interest = c(
"EX_biomass_e_f", "EX_biomass_e_r",
"EX_glc__D_e_r", "EX_glc__D_e_f",
"EX_for_e_r", "EX_for_e_f",
"EX_but_e_r", "EX_but_e_f",
"EX_ppa_e_r", "EX_ppa_e_f",
"EX_ac_e_r", "EX_ac_e_f"))
p
parallel::detectCores()
paths$src
epimod::model.sensitivity(
solver_fname     = fs::path(paths$gen, paste0(hypernode_name, ".solver")),
fba_fname = fba_files,
i_time = 0, f_time = 24, s_time = 0.25,
atol  = 1e-6, rtol = 1e-6,
n_config = parallel::detectCores(),
debug            = debug_solver,
target_value = c(abbr, 'n_ecsk1sm'),
parameters_fname = fs::path(paths$config, "initial_data_Ec_sen.csv"),
parallel_processors = parallel::detectCores(),
functions_fname  = fs::path(paths$src, paste0("functions_", hypernode_name, ".R")),
user_files = c(
fs::path(paths$config, "population_parameters.csv"),
fs::path(paths$gen,    paste0(hypernode_name, ".fbainfo")),
fs::path(paths$output, "ub_bounds_projected.csv"),
fs::path(paths$output, "ub_bounds_not_projected.csv")
))
fs::path(paths$config, "initial_data_Ec_sen.csv")
epimod::model.sensitivity(
solver_fname     = fs::path(paths$gen, paste0(hypernode_name, ".solver")),
fba_fname = fba_files,
i_time = 0, f_time = 24, s_time = 0.25,
atol  = 1e-6, rtol = 1e-6,
n_config = parallel::detectCores(),
debug            = debug_solver,
target_value = c(abbr, 'n_ecsk1sm'),
parameters_fname = fs::path(paths$config, "initial_data_Ec_sen.csv"),
parallel_processors = parallel::detectCores(),
functions_fname  = fs::path(paths$src, paste0("functions_", hypernode_name, ".R")),
user_files = c(
fs::path(paths$config, "population_parameters.csv"),
fs::path(paths$gen,    paste0(hypernode_name, ".fbainfo")),
fs::path(paths$output, "ub_bounds_projected.csv"),
fs::path(paths$output, "ub_bounds_not_projected.csv")
))
epimod::model.sensitivity(
solver_fname     = fs::path(paths$gen, paste0(hypernode_name, ".solver")),
fba_fname = fba_files,
i_time = 0, f_time = 24, s_time = 0.25,
atol  = 1e-6, rtol = 1e-6,
n_config = parallel::detectCores(),
debug            = debug_solver,
target_value = c(abbr, 'n_ecsk1sm'),
parameters_fname = fs::path(paths$config, "initial_data_Ec_sen.csv"),
parallel_processors = parallel::detectCores(),
functions_fname  = fs::path(paths$src, paste0("functions_", hypernode_name, "_sen.R")),
user_files = c(
fs::path(paths$config, "population_parameters.csv"),
fs::path(paths$gen,    paste0(hypernode_name, ".fbainfo")),
fs::path(paths$output, "ub_bounds_projected.csv"),
fs::path(paths$output, "ub_bounds_not_projected.csv")
))
m
epimod::model.sensitivity(
solver_fname     = fs::path(paths$gen, paste0(hypernode_name, ".solver")),
fba_fname = fba_files,
i_time = 0, f_time = 24, s_time = 0.25,
atol  = 1e-6, rtol = 1e-6,
n_config = parallel::detectCores(),
debug            = debug_solver,
target_value = c(abbr, 'n_ecsk1sm'),
parameters_fname = fs::path(paths$config, "initial_data_Ec_sen.csv"),
parallel_processors = parallel::detectCores(),
functions_fname  = fs::path(paths$src, paste0("functions_", hypernode_name, "_sen.R")),
user_files = c(
fs::path(paths$config, "population_parameters.csv"),
fs::path(paths$gen,    paste0(hypernode_name, ".fbainfo")),
fs::path(paths$output, "ub_bounds_projected.csv"),
fs::path(paths$output, "ub_bounds_not_projected.csv")
))
epimod::model.sensitivity(
solver_fname     = fs::path(paths$gen, paste0(hypernode_name, ".solver")),
fba_fname = fba_files,
i_time = 0, f_time = 24, s_time = 0.25,
atol  = 1e-6, rtol = 1e-6,
n_config = parallel::detectCores(),
debug            = debug_solver,
target_value = c('ecsk1sm_biomass_e', 'n_ecsk1sm'),
parameters_fname = fs::path(paths$config, "initial_data_Ec_sen.csv"),
parallel_processors = parallel::detectCores(),
functions_fname  = fs::path(paths$src, paste0("functions_", hypernode_name, "_sen.R")),
user_files = c(
fs::path(paths$config, "population_parameters.csv"),
fs::path(paths$gen,    paste0(hypernode_name, ".fbainfo")),
fs::path(paths$output, "ub_bounds_projected.csv"),
fs::path(paths$output, "ub_bounds_not_projected.csv")
))
