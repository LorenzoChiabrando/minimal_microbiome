f_notprojected <- file(output_ub_not_projected_path, "w")
f_notprojected
not_shared_base_bound
# Per le non-FBA, "replica" il valore base se necessario
if (length(not_shared_base_bound) == 1) {
base_values <- rep(not_shared_base_bound, n_bact)
} else {
base_values <- not_shared_base_bound
}
base_values
length(not_shared_base_bound) == 1
base_values <- rep(not_shared_base_bound, n_bact)
base_values
# Per le non-FBA, "replica" il valore base se necessario
if ( length(not_shared_base_bound) == 1 ) {
base_values <- rep(not_shared_base_bound, n_bact)
} else {
base_values <- not_shared_base_bound
}
base_values
first_line <- paste(c("base_upper_bounds", base_values), collapse = ",")
first_line
background_met
background_met * volume
fba_upper_bound
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
debug(run_full_ex_bounds)
debug(run_full_ex_bounds)
run_full_ex_bounds
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
fba_upper_bound = projected_base_ub,
not_shared_base_bound = not_shared_base_bound,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
debug(run_full_ex_bounds)
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
fba_upper_bound = projected_base_ub,
not_shared_base_bound = not_shared_base_bound,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
debug(run_full_ex_bounds)
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
fba_upper_bound = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
debug(run_full_ex_bounds)
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
debug(extract_boundary_reactions)
debug(process_ex_reactions)
# Build a unified metadata table from all bacterial models
reaction_metadata_all <- do.call(rbind, lapply(bacterial_models, function(model) {
meta_path <- file.path("hypernodes", hypernode_name, "biounits", model$FBAmodel, "reactions_metadata.csv")
if (!file.exists(meta_path)) {
warning("Missing metadata file for: ", model$FBAmodel)
return(NULL)
}
meta <- read.csv(meta_path, stringsAsFactors = FALSE)
meta$model_txt <- model$txt_file  # tag with .txt file identifier
meta
}))
reaction_metadata_all
View(reaction_metadata_all)
is.na(reaction_metadata_all$type)
table(is.na(reaction_metadata_all$type))
output_ub_projected_path    <- file.path(output_dir, "ub_bounds_projected.csv")
output_ub_not_projected_path <- file.path(output_dir, "ub_bounds_not_projected.csv")
f_projected    <- file(output_ub_projected_path, "w")
f_not_projected <- file(output_ub_not_projected_path, "w")
f_projected
if ( length(not_projected_base_lb) == 1 ) {
base_values <- rep(not_projected_base_lb, n_bact)
} else {
base_values <- not_projected_base_lb
}
if ( length(not_projected_base_lb) == 1 ) {
base_values <- rep(not_projected_base_lb, n_bact)
} else {
base_values <- not_projected_base_lb
}
base_values
if ( length(not_projected_base_lb) == 1 ) {
base_values <- rep(not_projected_base_lb, n_bact)
} else {
base_values <- not_projected_base_lb
}
base_values
not_projected_base_lb
base_values <- rep(not_projected_base_lb, n_bact)
base_values
first_line <- paste(c("base_not_projected_ub", base_values), collapse = ",")
writeLines(first_line, con = f_not_projected)
# Funzione per ottenere il nome base (senza _r o _f)
get_base_name <- function(rxn) {
sub("(_r|_f)$", "", rxn)
}
output_file
# Legge tutte le reazioni dal file
reactions <- readLines(output_file, warn = FALSE)
View(reactions)
# Itera sulle reazioni
for (reaction in reactions) {
# Salta eventuali reazioni non desiderate (es. EX_biomass_e)
if (grepl("EX_biomass_e", reaction)) next
# Ottieni il nome base della reazione
base_rxn <- get_base_name(reaction)
# Se la reazione è una FBA (cioè, la sua base è in fba_reactions)
if (base_rxn %in% fba_reactions) {
# Per le FBA si vuole SEMPRE processare la versione _f
if (!grepl("_f$", reaction)) next
# Imposta l'upper bound per la FBA
ub_values <- numeric(n_bact)
for (i in seq_len(n_bact)) {
ub_values[i] <- if (length(projected_base_ub) == 1) {
projected_base_ub
} else {
projected_base_ub[i]
}
}
line_to_write <- paste(c(reaction, ub_values), collapse = ",")
writeLines(line_to_write, con = f_fba)
} else {
# Per le non-FBA applica il filtro reaction_versions
if (reaction_versions == "r" && grepl("_f$", reaction)) next
if (reaction_versions == "f" && grepl("_r$", reaction)) next
# Imposta l'upper bound per le reazioni non-FBA
ub_values <- numeric(n_bact)
for (i in seq_len(n_bact)) {
ub_values[i] <- if (length(not_projected_base_lb) == 1) {
not_projected_base_lb / bacteria_counts[i]
} else {
not_projected_base_lb[i] / bacteria_counts[i]
}
}
line_to_write <- paste(c(reaction, ub_values), collapse = ",")
writeLines(line_to_write, con = f_nonfba)
}
}
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
debug(run_full_ex_bounds)
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
debug(process_ex_reactions)
process_ex_reactions(
output_dir = getwd(),
output_file = output_file,
bacterial_models = bacterial_models,
fba_reactions      = fba_reactions,
bacteria_counts    = bacteria_counts,
not_projected_base_lb = not_projected_base_lb,
projected_base_ub    = projected_base_ub,
reaction_versions  = reaction_versions
)
process_ex_reactions(
output_dir = getwd(),
output_file = output_file,
bacterial_models = bacterial_models,
fba_reactions      = fba_reactions,
bacteria_counts    = bacteria_counts,
not_projected_base_lb = not_projected_base_lb,
projected_base_ub    = projected_base_ub,
reaction_versions  = reaction_versions
)
grepl("EX_biomass_e", reactions)
table(grepl("EX_biomass_e", reaction))
table(grepl("EX_biomass_e", reactions))
base_rxn
# Legge tutte le reazioni dal file
reactions <- readLines(output_file, warn = FALSE)
reactions
reaction = reactions[1]
reaction
# Ottieni il nome base della reazione
base_rxn <- get_base_name(reaction)
# Funzione per ottenere il nome base (senza _r o _f)
get_base_name <- function(rxn) {
sub("(_r|_f)$", "", rxn)
}
# Ottieni il nome base della reazione
base_rxn <- get_base_name(reaction)
base_rxn
reaction_metadata_all$abbreviation
unique(reaction_metadata_all$abbreviation)
fba_reactions = unique(reaction_metadata_all$abbreviation)
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
debug(run_full_ex_bounds)
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
debug(process_ex_reactions)
reaction
base_rxn
ub_values
projected_base_ub[i]
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
background_met
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_ub <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_ub <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
source("~/Git_Repositories/minimal_microbiome/epimod_FBAfunctions/R/ex_bounds_module.R", echo = TRUE)
projected_base_lb
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
wd <- getwd()
source(file.path(wd, "functions_library", "install_and_setup.R"))
# Load core FBA functions
fba_scripts <- c("FBAgreatmodeClass.R", "class_generation.R", "readMat.R")
invisible(lapply(fba_scripts, function(f) {
source(file.path(wd, "epimod_FBAfunctions", "R", f))
}))
hypernode       <- "minimal_doublet.PNPRO"
hypernode_name  <- tools::file_path_sans_ext(hypernode)
hypernode_root  <- file.path(wd, "hypernodes", hypernode_name)
dirs <- c("config", "src", "output")
for (d in dirs) {
dir.create(file.path(hypernode_root, d), recursive = TRUE, showWarnings = FALSE)
cat("Ensured directory:", file.path(hypernode_root, d), "\n")
}
config_dir <- file.path(hypernode_root, "config")
src_dir    <- file.path(hypernode_root, "src")
out_dir    <- file.path(hypernode_root, "output")
cfg <- yaml::read_yaml(file.path(config_dir, paste0("config_", hypernode_name, ".yaml")))
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(vapply(cfg$organisms, `[[`, character(1), "initial_count"))
metabolite_places <- cfg$metabolite_places
source(file.path(wd, "functions_library", "setup_models.R"))
bacterial_models <- make_bacterial_models(
model_names,
biomass_params, pop_params, initial_counts
)
write_bac_params(
bacterial_models,
file.path(config_dir, "organisms_parameters.csv")
)
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(
bacterial_models,
function(m) process_model(m, hypernode_name = hypernode_name)
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
proj_res <- project_boundary_reactions(
bacterial_models      = bacterial_models,
metabolite_places     = metabolite_places,
out_dir = out_dir,
hypernode_name = hypernode_name
)
cat(capture.output(proj_res$bounds), sep = "\n")
pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO")
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation <- validate_pnpro(
pnpro2validate    = pnpro2validate,
hypernode_root    = hypernode_root,
bacterial_models  = bacterial_models,
metabolite_places = metabolite_places,
out_dir           = out_dir,
hypernode_name    = hypernode_name
)
source(file.path(wd, "functions_library", "generate_pnpro.R"))
generate_pnpro(
arc_df   = readr::read_csv(file.path(out_dir, "repaired_arcs.csv")),
pnpro_out = file.path(wd, "petri_nets_library", hypernode)
)
# Set full paths clearly
layout_script <- file.path(wd, "functions_library", "render_pnpro_layout.py")
blank_file    <- file.path(wd, "petri_nets_library", "blank.PNPRO")
input_file    <- file.path(wd, "petri_nets_library", hypernode)
output_file   <- file.path(wd, "petri_nets_library", paste0(hypernode_name, "_layouted.PNPRO"))
# Run layout generation
system(paste(
"python3",
shQuote(layout_script),
shQuote(blank_file),
shQuote(input_file),
shQuote(output_file)
))
cat("✓ Layout rendered to", output_file, "\n")
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
reaction_version = "r")
not_projected_base_ub
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
projected_base_lb
not_projected_base_lb
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
not_projected_base_ub = not_projected_base_ub,
reaction_version = "r")
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
not_projected_base_ub = not_projected_base_ub,
reaction_version = "r")
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
not_projected_base_ub = not_projected_base_ub,
reaction_version = "r")
reaction_bounds <- as.data.frame(cfg$exchange_bounds, stringsAsFactors = FALSE)
reaction_bounds
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
not_projected_base_ub = not_projected_base_ub,
reaction_version = "r")
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
not_projected_base_ub = not_projected_base_ub,
reaction_version = "r")
reaction_bounds
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
background_met <- cfg$background_met
volume <- cfg$volume
cell_density <- cfg$cell_density
projected_base_ub <- rep(cfg$fba_upper_bound, length(bacterial_models))
projected_base_lb <- rep(cfg$fba_lower_bound, length(bacterial_models))
not_projected_base_lb = background_met * volume
not_projected_base_ub = 1000
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
run_full_ex_bounds(hypernode_name = hypernode_name,
bacterial_models = bacterial_models,
projected_base_ub = projected_base_ub,
projected_base_lb = projected_base_lb,
not_projected_base_lb = not_projected_base_lb,
not_projected_base_ub = not_projected_base_ub,
reaction_version = "r")
wd = getwd()
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
View(run_full_ex_bounds)
cfg
