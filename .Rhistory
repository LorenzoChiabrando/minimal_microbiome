source(paste0(wd, "/epimod_FBAfunctions/inst/diets/Script4Diets.R"))
source(paste0(wd, "/functions/compiling_mn.R"))
# Define the output directory for results
dest_dir <- paste0(wd, "/results/")
# Define model configuration
model_name <- "Minimal_EcCb"
# Define bacterial models with consistent parameters
bacterial_models <- list(
list(
FBAmodel = "Escherichia_coli_str_K_12_substr_MG1655",
organism = "Escherichia_coli",
abbreviation = "Ec",
biomass = list(max = 1.172, mean = 0.489, min = 0.083)
),
list(
FBAmodel = "Clostridium_butyricum_DSM_10702",
organism = "Clostridium_butyricum",
abbreviation = "Cb",
biomass = list(max = 1.5, mean = 0.6, min = 0.1)  # Customize these values
)
)
# Start timing
start_time <- Sys.time()
# Process each bacterial model sequentially
process_results <- list()
# Define function to process one model
process_model <- function(model) {
# Extract model information
organism <- model$organism
abbr <- model$abbreviation
FBAmodel <- ifelse(is.null(model$FBAmodel), organism, model$FBAmodel)
# Log processing step
cat(sprintf("\nProcessing %s (%s)\n", organism, abbr))
cat(paste(rep("-", nchar(organism) + nchar(abbr) + 13), collapse = ""), "\n")
# Construct file paths
input_dir <- file.path(wd, "input", organism)
mat_file <- file.path(input_dir, paste0(FBAmodel, ".mat"))
# Validate input file
if (!file.exists(mat_file)) {
cat(sprintf("ERROR: Input file not found: %s\n", mat_file))
return(list(
status = "error",
message = sprintf("Input file not found: %s", mat_file),
organism = organism,
abbr = abbr
))
}
# Generate FBA model
cat(sprintf("Generating FBA model for %s...\n", organism))
model_obj <- tryCatch({
FBA4Greatmod.generation(fba_mat = mat_file)
}, error = function(e) {
cat(sprintf("ERROR: Failed to generate model: %s\n", e$message))
return(NULL)
})
# If model generation failed, return error
if ( is.null(model_obj) ) {
return(list(
status = "error",
message = "Failed to generate model",
organism = organism,
abbr = abbr
))
}
# Set biomass parameters
cat("Setting biomass parameters...\n")
model_obj <- setBiomassParameters(
model_obj,
bioMax = model$biomass$max,
bioMean = model$biomass$mean,
bioMin = model$biomass$min
)
# Create output directories if they don't exist
reactions_dir <- file.path(input_dir)
if (!dir.exists(reactions_dir)) dir.create(reactions_dir, recursive = TRUE)
# Write metadata files
cat("Writing metadata files...\n")
reactions_file <- file.path(reactions_dir, "reactions_metadata.csv")
write.csv(reactions_df, file = reactions_file, row.names = FALSE)
metabolites_file <- file.path(reactions_dir, "metabolites_metadata.csv")
write.csv(met_metadata, file = metabolites_file, row.names = FALSE)
# Save model in compiled_models directory
output_dir <- file.path(wd, "compiled_models")
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
output_file <- file.path(output_dir, paste0(abbr, "_model.txt"))
capture_output <- capture.output(model_obj)
writeLines(capture_output, output_file)
cat(sprintf("Model saved to %s\n", output_file))
return(list(
status = "success",
message = sprintf("Successfully processed %s (%s)", organism, abbr),
organism = organism,
abbr = abbr,
reactions_file = reactions_file,
metabolites_file = metabolites_file,
model_file = output_file
))
}
# Process each model one at a time
for (i in seq_along(bacterial_models)) {
process_results[[i]] <- process_model(bacterial_models[[i]])
}
# Display summary
cat("\nProcessing Summary:\n")
cat("-----------------\n")
for (result in process_results) {
if (result$status == "success") {
cat(sprintf("✓ %s (%s): Successfully processed\n", result$organism, result$abbr))
} else {
cat(sprintf("✗ %s (%s): ERROR - %s\n", result$organism, result$abbr, result$message))
}
}
# Calculate and display elapsed time
end_time <- Sys.time()
elapsed <- end_time - start_time
cat(sprintf("\nAll models processed in %.2f seconds\n", as.numeric(elapsed)))
molar = 10 # mmol/mL (1000 mM)
V = 0.001 # mL (1 microL)
C = molar*V # mmol
# Define metabolite places to project across models
metabolite_places <- c("ac_e", "ppa_e", "but_e", "glc__D_e", "lcts_e")
output_dir <- file.path(wd, "results_ex_reactions")
# Initialize output lists
bacteria_files <- character()
bacteria_counts <- numeric()
fba_upper_bounds <- numeric()
shared_reactions <- list()
# Log file for tracking projectable metabolites
log_file <- file.path(output_dir, "projection_log.txt")
cat("Metabolite Projection Analysis\n", file = log_file)
cat("============================\n\n", file = log_file, append = TRUE)
# Process each bacterial model
for ( i in seq_along(bacterial_models) ) {
model <- bacterial_models[[i]]
organism <- model$organism
abbr <- model$abbreviation
cat(sprintf("Analyzing model: %s (%s)\n", organism, abbr), file = log_file, append = TRUE)
# Set file path for compiled model
model_file <- file.path("compiled_models", paste0(abbr, "_model.txt"))
# Verify model file exists
if (!file.exists(model_file)) {
cat(sprintf("Error: Model file not found: %s\n", model_file), file = log_file, append = TRUE)
next
}
# Load metabolite metadata
meta_file <- file.path("input", organism, "metabolites_metadata.csv")
if (!file.exists(meta_file)) {
cat(sprintf("Error: Metabolite metadata not found: %s\n", meta_file), file = log_file, append = TRUE)
next
}
# Load reaction metadata
rxn_file <- file.path("input", organism, "reactions_metadata.csv")
if (!file.exists(rxn_file)) {
cat(sprintf("Error: Reaction metadata not found: %s\n", rxn_file), file = log_file, append = TRUE)
next
}
# Read metadata
metabolite_data <- read.csv(meta_file)
reaction_data <- read.csv(rxn_file, stringsAsFactors = FALSE)
# Check which metabolite places can be projected to this model
cat("Checking metabolite projections:\n", file = log_file, append = TRUE)
projectable_metabolites <- character()
for (met in metabolite_places) {
# Check if metabolite exists in this model
if (any(grepl(met, metabolite_data$id))) {
projectable_metabolites <- c(projectable_metabolites, met)
cat(sprintf("  ✓ %s: Found in model\n", met), file = log_file, append = TRUE)
} else {
cat(sprintf("  ✗ %s: Not found in model\n", met), file = log_file, append = TRUE)
}
}
# Find boundary reactions associated with projectable metabolites
boundary_reactions <- reaction_data$abbreviation[reaction_data$type == "boundary"]
for (met in projectable_metabolites) {
print(met)
related_rxns <- character()
# 1. Check reaction equations if available in metadata
if ("equation" %in% names(reaction_data)) {
# Get boundary reactions where the metabolite appears in the equation
eq_matches <- character()
for (i in which(reaction_data$type == "boundary")) {
# Check if metabolite is in the equation as a standalone term
# This uses word boundaries to avoid partial matches
if (grepl(paste0("\\b", met, "\\b"), reaction_data$equation[i])) {
eq_matches <- c(eq_matches, reaction_data$abbreviation[i])
}
}
related_rxns <- c(related_rxns, eq_matches)
}
# Remove duplicates
related_rxns <- unique(related_rxns)
print(related_rxns)
if (length(related_rxns) > 0) {
model_shared_reactions <- c(model_shared_reactions, related_rxns)
cat(sprintf("  Found %d reactions for %s: %s\n",
length(related_rxns), met, paste(related_rxns, collapse=", ")),
file = log_file, append = TRUE)
} else {
# If no reactions found through analysis, log this information
cat(sprintf("  No boundary reactions found for %s through direct analysis\n", met),
file = log_file, append = TRUE)
}
}
# Add to output lists if projectable metabolites were found
if (length(projectable_metabolites) > 0) {
bacteria_files <- c(bacteria_files, model_file)
# Use default values or those from the model if available
biomass_value <- ifelse(!is.null(model$biomass$mean),
model$biomass$mean,
default_biomass)
bacteria_count <- ifelse(!is.null(model$initial_count),
model$initial_count,
default_bacteria_count)
bacteria_counts <- c(bacteria_counts, bacteria_count * biomass_value)
fba_upper_bounds <- c(fba_upper_bounds, default_fba_upper_bound)
shared_reactions[[abbr]] <- model_shared_reactions
}
cat("\n", file = log_file, append = TRUE)
}
# Combine all unique reactions across models
all_shared_reactions <- unique(unlist(shared_reactions))
# Only run if we found compatible models
if (length(bacteria_files) > 0) {
# Log summary
cat("\nSummary:\n", file = log_file, append = TRUE)
cat(sprintf("Total bacterial models analyzed: %d\n", length(bacterial_models)), file = log_file, append = TRUE)
cat(sprintf("Compatible models found: %d\n", length(bacteria_files)), file = log_file, append = TRUE)
cat(sprintf("Total shared boundary reactions: %d\n", length(all_shared_reactions)), file = log_file, append = TRUE)
cat(sprintf("Output files saved to: %s\n", output_dir), file = log_file, append = TRUE)
} else {
cat("No compatible models found for the specified metabolites.\n", file = log_file, append = TRUE)
}
all_shared_reactions
shared_reactions
model_shared_reactions
model_shared_reactions
related_rxn
related_rxns
model_shared_reactions
library(devtools)
library(dplyr)
library(R.matlab)
library(ggplot2)
library(dplyr)
library(tidyr)
library(patchwork)
library(ggplot2)
library(scales)
library(rlang)
library(parallel)
library(foreach)
library(doParallel)
# remove.packages("epimod")
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
library(epimod)
# downloadContainers()
wd = getwd()
# Load custom R scripts for Flux Balance Analysis (FBA) functions and utilities
source(paste0(wd, "/epimod_FBAfunctions/R/FBAgreatmodeClass.R"))    # Core FBA class functions
source(paste0(wd, "/epimod_FBAfunctions/R/class_generation.R"))     # Functions for generating FBA models
source(paste0(wd, "/epimod_FBAfunctions/R/readMat.R"))              # MATLAB file reading utilities
source(paste0(wd, "/epimod_FBAfunctions/R/ex_bounds_module.R"))
source(paste0(wd, "/epimod_FBAfunctions/inst/diets/Script4Diets.R"))
source(paste0(wd, "/functions/compiling_mn.R"))
# Define the output directory for results
dest_dir <- paste0(wd, "/results/")
# Define model configuration
model_name <- "Minimal_EcCb"
# Define bacterial models with consistent parameters
bacterial_models <- list(
list(
FBAmodel = "Escherichia_coli_str_K_12_substr_MG1655",
organism = "Escherichia_coli",
abbreviation = "Ec",
biomass = list(max = 1.172, mean = 0.489, min = 0.083)
),
list(
FBAmodel = "Clostridium_butyricum_DSM_10702",
organism = "Clostridium_butyricum",
abbreviation = "Cb",
biomass = list(max = 1.5, mean = 0.6, min = 0.1)  # Customize these values
)
)
# Start timing
start_time <- Sys.time()
# Process each bacterial model sequentially
process_results <- list()
# Define function to process one model
process_model <- function(model) {
# Extract model information
organism <- model$organism
abbr <- model$abbreviation
FBAmodel <- ifelse(is.null(model$FBAmodel), organism, model$FBAmodel)
# Log processing step
cat(sprintf("\nProcessing %s (%s)\n", organism, abbr))
cat(paste(rep("-", nchar(organism) + nchar(abbr) + 13), collapse = ""), "\n")
# Construct file paths
input_dir <- file.path(wd, "input", organism)
mat_file <- file.path(input_dir, paste0(FBAmodel, ".mat"))
# Validate input file
if (!file.exists(mat_file)) {
cat(sprintf("ERROR: Input file not found: %s\n", mat_file))
return(list(
status = "error",
message = sprintf("Input file not found: %s", mat_file),
organism = organism,
abbr = abbr
))
}
# Generate FBA model
cat(sprintf("Generating FBA model for %s...\n", organism))
model_obj <- tryCatch({
FBA4Greatmod.generation(fba_mat = mat_file)
}, error = function(e) {
cat(sprintf("ERROR: Failed to generate model: %s\n", e$message))
return(NULL)
})
# If model generation failed, return error
if ( is.null(model_obj) ) {
return(list(
status = "error",
message = "Failed to generate model",
organism = organism,
abbr = abbr
))
}
# Set biomass parameters
cat("Setting biomass parameters...\n")
model_obj <- setBiomassParameters(
model_obj,
bioMax = model$biomass$max,
bioMean = model$biomass$mean,
bioMin = model$biomass$min
)
# Create output directories if they don't exist
reactions_dir <- file.path(input_dir)
if (!dir.exists(reactions_dir)) dir.create(reactions_dir, recursive = TRUE)
# Write metadata files
cat("Writing metadata files...\n")
reactions_file <- file.path(reactions_dir, "reactions_metadata.csv")
write.csv(reactions_df, file = reactions_file, row.names = FALSE)
metabolites_file <- file.path(reactions_dir, "metabolites_metadata.csv")
write.csv(met_metadata, file = metabolites_file, row.names = FALSE)
# Save model in compiled_models directory
output_dir <- file.path(wd, "compiled_models")
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
output_file <- file.path(output_dir, paste0(abbr, "_model.txt"))
capture_output <- capture.output(model_obj)
writeLines(capture_output, output_file)
cat(sprintf("Model saved to %s\n", output_file))
return(list(
status = "success",
message = sprintf("Successfully processed %s (%s)", organism, abbr),
organism = organism,
abbr = abbr,
reactions_file = reactions_file,
metabolites_file = metabolites_file,
model_file = output_file
))
}
# Process each model one at a time
for (i in seq_along(bacterial_models)) {
process_results[[i]] <- process_model(bacterial_models[[i]])
}
# Display summary
cat("\nProcessing Summary:\n")
cat("-----------------\n")
for (result in process_results) {
if (result$status == "success") {
cat(sprintf("✓ %s (%s): Successfully processed\n", result$organism, result$abbr))
} else {
cat(sprintf("✗ %s (%s): ERROR - %s\n", result$organism, result$abbr, result$message))
}
}
# Calculate and display elapsed time
end_time <- Sys.time()
elapsed <- end_time - start_time
cat(sprintf("\nAll models processed in %.2f seconds\n", as.numeric(elapsed)))
molar = 10 # mmol/mL (1000 mM)
V = 0.001 # mL (1 microL)
C = molar*V # mmol
# Define metabolite places to project across models
metabolite_places <- c("ac_e", "ppa_e", "but_e", "glc__D_e", "lcts_e")
output_dir <- file.path(wd, "results_ex_reactions")
# Initialize output lists
bacteria_files <- character()
bacteria_counts <- numeric()
fba_upper_bounds <- numeric()
shared_reactions <- list()
# Log file for tracking projectable metabolites
log_file <- file.path(output_dir, "projection_log.txt")
cat("Metabolite Projection Analysis\n", file = log_file)
cat("============================\n\n", file = log_file, append = TRUE)
# Process each bacterial model
for ( i in seq_along(bacterial_models) ) {
model <- bacterial_models[[i]]
organism <- model$organism
abbr <- model$abbreviation
cat(sprintf("Analyzing model: %s (%s)\n", organism, abbr), file = log_file, append = TRUE)
# Set file path for compiled model
model_file <- file.path("compiled_models", paste0(abbr, "_model.txt"))
# Verify model file exists
if (!file.exists(model_file)) {
cat(sprintf("Error: Model file not found: %s\n", model_file), file = log_file, append = TRUE)
next
}
# Load metabolite metadata
meta_file <- file.path("input", organism, "metabolites_metadata.csv")
if (!file.exists(meta_file)) {
cat(sprintf("Error: Metabolite metadata not found: %s\n", meta_file), file = log_file, append = TRUE)
next
}
# Load reaction metadata
rxn_file <- file.path("input", organism, "reactions_metadata.csv")
if (!file.exists(rxn_file)) {
cat(sprintf("Error: Reaction metadata not found: %s\n", rxn_file), file = log_file, append = TRUE)
next
}
# Read metadata
metabolite_data <- read.csv(meta_file)
reaction_data <- read.csv(rxn_file, stringsAsFactors = FALSE)
# Check which metabolite places can be projected to this model
cat("Checking metabolite projections:\n", file = log_file, append = TRUE)
projectable_metabolites <- character()
for (met in metabolite_places) {
# Check if metabolite exists in this model
if (any(grepl(met, metabolite_data$id))) {
projectable_metabolites <- c(projectable_metabolites, met)
cat(sprintf("  ✓ %s: Found in model\n", met), file = log_file, append = TRUE)
} else {
cat(sprintf("  ✗ %s: Not found in model\n", met), file = log_file, append = TRUE)
}
}
# Find boundary reactions associated with projectable metabolites
boundary_reactions <- reaction_data$abbreviation[reaction_data$type == "boundary"]
for (met in projectable_metabolites) {
related_rxns <- character()
# 1. Check reaction equations if available in metadata
if ("equation" %in% names(reaction_data)) {
# Get boundary reactions where the metabolite appears in the equation
eq_matches <- character()
for (i in which(reaction_data$type == "boundary")) {
# Check if metabolite is in the equation as a standalone term
# This uses word boundaries to avoid partial matches
if (grepl(paste0("\\b", met, "\\b"), reaction_data$equation[i])) {
eq_matches <- c(eq_matches, reaction_data$abbreviation[i])
}
}
related_rxns <- c(related_rxns, eq_matches)
}
# Remove duplicates
related_rxns <- unique(related_rxns)
if (length(related_rxns) > 0) {
model_shared_reactions <- c(unique(model_shared_reactions), related_rxns)
cat(sprintf("  Found %d reactions for %s: %s\n",
length(related_rxns), met, paste(related_rxns, collapse=", ")),
file = log_file, append = TRUE)
} else {
# If no reactions found through analysis, log this information
cat(sprintf("  No boundary reactions found for %s through direct analysis\n", met),
file = log_file, append = TRUE)
}
}
# Add to output lists if projectable metabolites were found
if (length(projectable_metabolites) > 0) {
bacteria_files <- c(bacteria_files, model_file)
# Use default values or those from the model if available
biomass_value <- ifelse(!is.null(model$biomass$mean),
model$biomass$mean,
default_biomass)
bacteria_count <- ifelse(!is.null(model$initial_count),
model$initial_count,
default_bacteria_count)
bacteria_counts <- c(bacteria_counts, bacteria_count * biomass_value)
fba_upper_bounds <- c(fba_upper_bounds, default_fba_upper_bound)
shared_reactions[[abbr]] <- model_shared_reactions
}
cat("\n", file = log_file, append = TRUE)
}
# Combine all unique reactions across models
all_shared_reactions <- unique(unlist(shared_reactions))
# Only run if we found compatible models
if (length(bacteria_files) > 0) {
# Log summary
cat("\nSummary:\n", file = log_file, append = TRUE)
cat(sprintf("Total bacterial models analyzed: %d\n", length(bacterial_models)), file = log_file, append = TRUE)
cat(sprintf("Compatible models found: %d\n", length(bacteria_files)), file = log_file, append = TRUE)
cat(sprintf("Total shared boundary reactions: %d\n", length(all_shared_reactions)), file = log_file, append = TRUE)
cat(sprintf("Output files saved to: %s\n", output_dir), file = log_file, append = TRUE)
} else {
cat("No compatible models found for the specified metabolites.\n", file = log_file, append = TRUE)
}
run_full_ex_bounds(
extraction_output  = "extracted_ex_reactions.txt",
bacteria_files     = bacteria_files,
output_dir         = "results_ex_reactions",
bacteria_counts    = bacteria_counts,
fba_upper_bound    = c(1000, 1000),
fba_reactions      = ...,
not_shared_base_bound = C,
reaction_version   = "r"
)
shared_reactions
# Remove duplicate entries for each abbreviation
shared_reactions <- lapply(shared_reactions, unique)
shared_reactions
# Compute the joint (union) of all reactions
joint_reactions <- Reduce(union, shared_reactions)
joint_reactions
joint_reactions
rep(1000, 5)
bacteria_counts
