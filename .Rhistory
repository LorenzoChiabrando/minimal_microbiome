file.path(
wd,
"hypernodes",
hypernode_dirname,
paste0("configs_", hypernode_dirname),
"organisms_parameters.csv"
)
)
# 4) Now you have
pnpro_path       <- paste0(full_dir_path, "/", hypernode)
metabolite_places = cfg$metabolite_places
source(file.path(wd, "functions_library", "process_model.R"))
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
# 4) Now you have
pnpro_path       <- paste0(full_dir_path, "/", hypernode)
metabolite_places = cfg$metabolite_places
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(bacterial_models, function(model) process_model(model, hypernode_name = hypernode_dirname))
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
cat( capture.output(results_projection$bounds), sep = "\n" )
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/net/config/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")),
pnpro_out = file.path(wd, "net/hypernode_minimal_doublet.PNPRO"))
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
source(file.path(wd, "functions_library/generate_pnpro.R"))
paste0(wd, "/net/config/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/hypernodes", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/", hypernode, "_arc_df_repaired.csv")
readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/", hypernode, "_arc_df_repaired.csv"))
arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_minimal_doublet/", hypernode, "_arc_df_repaired.csv"))
arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_minimal_doublet/", hypernode, "_arc_df_repaired.csv"))
paste0(hypernode_dirname, ".PNPRO")
paste0(wd, "/hypernodes/", hypernode_dirname, hypernode_dirname, ".PNPRO")
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO")
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_minimal_doublet/", hypernode, "_arc_df_repaired.csv")),
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
hypernode_dirname
hypernode_dirname
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_", hypernode_dirname, "/", hypernode, "_arc_df_repaired.csv")),
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", , "hypernodes/", hypernode_dirname, "/output.PNPRO")
paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO")
system(paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO"))
paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO")
system(paste0("python", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
wd <- getwd()
source(paste0(wd, "/functions_library/install_and_setup.R"))
# Load necessary scripts
sapply(c("/epimod_FBAfunctions/R/FBAgreatmodeClass.R",
"/epimod_FBAfunctions/R/class_generation.R",
"/epimod_FBAfunctions/R/readMat.R",
"/epimod_FBAfunctions/R/ex_bounds_module.R"),
function(f) source(paste0(wd, f)))
hypernode = "minimal_doublet.PNPRO"
# Create the corresponding directory inside "hypernodes/"
hypernode_dirname <- tools::file_path_sans_ext(hypernode)
full_dir_path <- file.path(wd, "hypernodes", hypernode_dirname)
if (!dir.exists(full_dir_path)) {
dir.create(full_dir_path, recursive = TRUE)
cat(sprintf("Created directory: %s\n", full_dir_path))
} else {
cat(sprintf("Directory already exists: %s\n", full_dir_path))
}
# List of subdirectory suffixes
suffixes <- c("configs", "projections", "validations", "functions", "metabolic_networks")
# Generate full paths
subdirs <- file.path(full_dir_path, paste0(suffixes, "_", hypernode_dirname))
# Create each subdirectory if not existing
for (subdir in subdirs) {
if (!dir.exists(subdir)) {
dir.create(subdir, recursive = TRUE)
cat(sprintf("Created directory: %s\n", subdir))
} else {
cat(sprintf("Directory already exists: %s\n", subdir))
}
}
# Correct path to the YAML config under new structure
cfg <- yaml::read_yaml(file.path(
wd,
"hypernodes",
hypernode_dirname,
paste0("configs_", hypernode_dirname),
paste0("config_", hypernode_dirname, ".yaml")
))
# 1) Pull out the pieces
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(
vapply(cfg$organisms, `[[`, character(1), "initial_count")
)
# Load setup_models
source(file.path(wd, "functions_library", "setup_models.R"))
# 2) Build the list (derive_abbrs() runs internally)
bacterial_models <- make_bacterial_models(
model_names    = model_names,
biomass_params = biomass_params,
pop_params     = pop_params,
initial_counts = initial_counts
)
# 3) Write out organisms_parameters_<hypernode_dirname>.csv
write_bac_params(
bacterial_models,
file.path(
wd,
"hypernodes",
hypernode_dirname,
paste0("configs_", hypernode_dirname),
"organisms_parameters.csv"
)
)
# 4) Now you have
pnpro_path       <- paste0(full_dir_path, "/", hypernode)
metabolite_places = cfg$metabolite_places
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(bacterial_models, function(model) process_model(model, hypernode_name = hypernode_dirname))
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
cat( capture.output(results_projection$bounds), sep = "\n" )
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_", hypernode_dirname, "/", hypernode, "_arc_df_repaired.csv")),
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
# system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
#               " ", wd, "/petri_nets_library/blank.PNPRO", " ", wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python3", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", wd, "/petri_nets_library/blank.PNPRO", " ", wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
# main_doublet.R
# 0) Setup
wd <- getwd()
source(file.path(wd, "functions_library", "install_and_setup.R"))
# Load core FBA functions
fba_scripts <- c("FBAgreatmodeClass.R", "class_generation.R", "readMat.R", "ex_bounds_module.R")
invisible(lapply(fba_scripts, function(f) {
source(file.path(wd, "epimod_FBAfunctions", "R", f))
}))
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
# 1) Define hypernode
hypernode       <- "minimal_doublet.PNPRO"
hypernode_name  <- tools::file_path_sans_ext(hypernode)
hypernode_name
hypernode_root  <- file.path(wd, "hypernodes", hypernode_name)
hypernode_root
# 2) Create the three canonical subfolders
dirs <- c("config", "src", "output")
for (d in dirs) {
dir.create(file.path(hypernode_root, d), recursive = TRUE, showWarnings = FALSE)
cat("Ensured directory:", file.path(hypernode_root, d), "\n")
}
config_dir <- file.path(hypernode_root, "config")
src_dir    <- file.path(hypernode_root, "src")
out_dir    <- file.path(hypernode_root, "output")
# 3) Read hypernode-specific YAML
cfg <- yaml::read_yaml(file.path(
config_dir,
paste0("config_", hypernode_name, ".yaml")
))
# 4) Extract parameters
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
model_names
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(vapply(cfg$organisms, `[[`, character(1), "initial_count"))
metabolite_places <- cfg$metabolite_places
# 5) Build organism models and dump parameters
source(file.path(wd, "functions_library", "setup_models.R"))
bacterial_models <- make_bacterial_models(
model_names, biomass_params, pop_params, initial_counts
)
bacterial_models
write_bac_params(
bacterial_models,
file.path(config_dir, "organisms_parameters.csv")
)
# 7) Project boundary reactions → single output folder
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
proj_res <- project_boundary_reactions(
bacterial_models      = bacterial_models,
metabolite_places     = metabolite_places,
output_dir_projections = out_dir
)
cat(capture.output(proj_res$bounds), sep = "\n")
# 8) Validate PNPRO → same output folder
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation <- validate_pnpro(
pnpro2validate    = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path     = file.path(src_dir, "metabolic_networks"),
bacterial_models  = bacterial_models,
metabolite_places = metabolite_places,
validation_dir    = out_dir,
pnpro_name        = hypernode
)
validation <- validate_pnpro(
pnpro2validate    = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path     = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models  = bacterial_models,
metabolite_places = metabolite_places,
validation_dir    = out_dir,
pnpro_name        = hypernode
)
hypernode_root
View(validate_pnpro)
# main_doublet.R
# 0) Setup
wd <- getwd()
source(file.path(wd, "functions_library", "install_and_setup.R"))
# Load core FBA functions
fba_scripts <- c("FBAgreatmodeClass.R", "class_generation.R", "readMat.R", "ex_bounds_module.R")
invisible(lapply(fba_scripts, function(f) {
source(file.path(wd, "epimod_FBAfunctions", "R", f))
}))
# 1) Define hypernode
hypernode       <- "minimal_doublet.PNPRO"
hypernode_name  <- tools::file_path_sans_ext(hypernode)
hypernode_root  <- file.path(wd, "hypernodes", hypernode_name)
# 2) Create the three canonical subfolders
dirs <- c("config", "src", "output")
for (d in dirs) {
dir.create(file.path(hypernode_root, d), recursive = TRUE, showWarnings = FALSE)
cat("Ensured directory:", file.path(hypernode_root, d), "\n")
}
config_dir <- file.path(hypernode_root, "config")
src_dir    <- file.path(hypernode_root, "src")
out_dir    <- file.path(hypernode_root, "output")
# 3) Read hypernode-specific YAML
cfg <- yaml::read_yaml(file.path(
config_dir,
paste0("config_", hypernode_name, ".yaml")
))
# 4) Extract parameters
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(vapply(cfg$organisms, `[[`, character(1), "initial_count"))
metabolite_places <- cfg$metabolite_places
# Load setup_models
source(file.path(wd, "functions_library", "setup_models.R"))
# 2) Build the list (derive_abbrs() runs internally)
bacterial_models <- make_bacterial_models(
model_names    = model_names,
biomass_params = biomass_params,
pop_params     = pop_params,
initial_counts = initial_counts
)
# 3) Write out organisms_parameters_<hypernode_dirname>.csv
write_bac_params(
bacterial_models,
file.path(
wd,
"hypernodes",
hypernode_dirname,
paste0("configs_", hypernode_dirname),
"organisms_parameters.csv"
)
)
# 0) Setup
wd <- getwd()
source(file.path(wd, "functions_library", "install_and_setup.R"))
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
# Load core FBA functions
fba_scripts <- c("FBAgreatmodeClass.R", "class_generation.R", "readMat.R", "ex_bounds_module.R")
invisible(lapply(fba_scripts, function(f) {
source(file.path(wd, "epimod_FBAfunctions", "R", f))
}))
# 1) Define hypernode
hypernode       <- "minimal_doublet.PNPRO"
hypernode_name  <- tools::file_path_sans_ext(hypernode)
hypernode_root  <- file.path(wd, "hypernodes", hypernode_name)
# 2) Create the three canonical subfolders
dirs <- c("config", "src", "output")
for (d in dirs) {
dir.create(file.path(hypernode_root, d), recursive = TRUE, showWarnings = FALSE)
cat("Ensured directory:", file.path(hypernode_root, d), "\n")
}
config_dir <- file.path(hypernode_root, "config")
src_dir    <- file.path(hypernode_root, "src")
out_dir    <- file.path(hypernode_root, "output")
# 3) Read hypernode-specific YAML
cfg <- yaml::read_yaml(file.path(
config_dir,
paste0("config_", hypernode_name, ".yaml")
))
# 4) Extract parameters
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(vapply(cfg$organisms, `[[`, character(1), "initial_count"))
metabolite_places <- cfg$metabolite_places
# 5) Build organism models and dump parameters
source(file.path(wd, "functions_library", "setup_models.R"))
bacterial_models <- make_bacterial_models(
model_names, biomass_params, pop_params, initial_counts
)
bacterial_models
bacterial_models <- make_bacterial_models(
model_names, biomass_params, pop_params, initial_counts
)
write_bac_params(
bacterial_models,
file.path(config_dir, "organisms_parameters.csv")
)
# 6) Process each model
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(
bacterial_models,
function(m) process_model(m, hypernode_name = hypernode_name)
)
View(process_model)
View(process_model)
View(FBA4Greatmod.generation)
View(process_model)
View(process_model)
# 6) Process each model
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(
bacterial_models,
function(m) process_model(m, hypernode_name = hypernode_name)
)
# 8) Validate PNPRO → same output folder
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation <- validate_pnpro(
pnpro2validate    = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path     = hypernode_root,
bacterial_models  = bacterial_models,
metabolite_places = metabolite_places,
validation_dir    = out_dir,
pnpro_name        = hypernode
)
validation
# 9) Generate the final PNPRO → output folder
source(file.path(wd, "functions_library", "generate_pnpro.R"))
generate_pnpro(
arc_df   = readr::read_csv(
file.path(out_dir, paste0(hypernode, "_arc_df_repaired.csv"))
),
pnpro_out = file.path(out_dir, hypernode)
)
# 10) Render layout
system(paste(
"python3",
shQuote(file.path(wd, "functions_library", "render_pnpro_layout.py")),
shQuote(file.path(wd, "petri_nets_library", "blank.PNPRO")),
shQuote(file.path(out_dir, hypernode))
))
View(run_full_ex_bounds)
joint_reactions
source(file.path(wd, "epimod_FBAfunctions", "R", "ex_bounds_module.R"))
# ---- 1. CRAN packages to install ----
cran_pkgs <- c(
"dplyr", "R.matlab", "ggplot2", "stringr", "purrr", "jsonlite",
"tidyr", "patchwork", "scales", "fdatest", "xml2", "yaml",
"rlang", "parallel", "foreach", "doParallel", "glue", "readr"
)
# ---- 2. Helper: install if missing ----
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg,
repos        = "https://cloud.r-project.org",
dependencies = TRUE)
}
}
# ---- 0. Point to your R 4.x library first (optional) ----
# .libPaths("/home/user/R/x86_64-pc-linux-gnu-library/4.5")
# ---- 1. CRAN packages to install ----
cran_pkgs <- c(
"dplyr", "R.matlab", "ggplot2", "stringr", "purrr", "jsonlite",
"tidyr", "patchwork", "scales", "fdatest", "xml2", "yaml",
"rlang", "parallel", "foreach", "doParallel", "glue", "readr"
)
# ---- 2. Helper: install if missing ----
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg,
repos        = "https://cloud.r-project.org",
dependencies = TRUE)
}
}
# ---- 3. Reinstall pkgload & usethis under R4.x ----
deps <- c("pkgload", "usethis")
for (p in deps) {
if (p %in% rownames(installed.packages())) {
message("Removing old ", p, " …")
remove.packages(p)
}
message("Installing fresh ", p, " …")
install.packages(p,
repos        = "https://cloud.r-project.org",
dependencies = TRUE)
}  # ensures devtools dependencies are R4.x–compatible :contentReference[oaicite:1]{index=1}
# ---- 4. Install all other CRAN packages ----
invisible(lapply(cran_pkgs, install_if_missing))
# ---- 5. Install (or upgrade) devtools ----
if (!requireNamespace("devtools", quietly = TRUE)) {
devtools::install.packages("devtools",
repos        = "https://cloud.r-project.org",
dependencies = TRUE,
force = TRUE)
} else {
message("Updating devtools …")
# Or the development version from GitHub:
# install.packages("devtools")
devtools::install_github("r-lib/devtools")
}
# ---- 6. Install epimod from GitHub if needed ----
if (!requireNamespace("epimod", quietly = TRUE)) {
# remove.packages("epimod")
devtools::install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
}
# ---- 7. Load all libraries ----
all_pkgs <- c(cran_pkgs, deps, "devtools", "epimod")
invisible(lapply(all_pkgs, library, character.only = TRUE))
# ---- 5. Download epimod containers ----
downloadContainers()
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
# 1) Read the JSON into a list
cfg <- fromJSON("boundary_conditions.json", simplifyVector = TRUE)
# 1) Read the JSON into a list
cfg <- fromJSON("boundary_conditions.json", simplifyVector = TRUE)  :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}
# 1) Read the complete JSON file into a list
cfg <- fromJSON("boundary_conditions.json", simplifyVector = TRUE)
# 1) Read the complete JSON file into a list
cfg <- fromJSON(file.path(config_dir, "boundary_conditions.json"), simplifyVector = TRUE)
cfg
# 2) Extract global parameters
background_met_flux_bound <- cfg$background_met_flux_bound
volume                   <- cfg$volume
cell_density             <- cfg$cell_density
# 2) Extract global parameters
background_met <- cfg$background_met
volume                   <- cfg$volume
cell_density             <- cfg$cell_density
C = background_met * volume
C
# 3) Build a data.frame of exchange bounds
exchange_bounds <- as.data.frame(cfg$exchange_bounds, stringsAsFactors = FALSE)
# 4) (Optional) Convert columns to appropriate types
exchange_bounds$value <- as.numeric(exchange_bounds$value)
exchange_bounds
bacteria_files
