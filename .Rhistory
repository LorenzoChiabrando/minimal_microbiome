names_to = "direction",
values_to = "reaction"
) %>%
filter(!is.na(reaction)) %>%
mutate(
lb = if_else(direction == "forward_reaction", lb_f, lb_r),
ub = if_else(direction == "forward_reaction", ub_f, ub_r)
) %>%
select(reaction, lb, ub)
# Save to CSV
irr_output_path <- file.path(output_dir_projections, sprintf("irreversible_reactions_%s.csv", unique(.y$abbr)))
write_csv(irr_long, irr_output_path)
cat(sprintf("  ✓ Irreversible network saved for %s: %s\n", unique(.y$abbr), irr_output_path))
})
models_df %>%
dplyr::select(abbr, reactions) %>%
unnest(reactions) %>%
group_by(abbr) %>%
group_walk(~ {
# Create irreversible reaction table
irr_net <- .x %>%
mutate(
is_reversible = lowbnd < 0 & uppbnd > 0,
forward_reaction = if_else(is_reversible, paste0(abbreviation, "_f"), abbreviation),
reverse_reaction = if_else(is_reversible, paste0(abbreviation, "_r"), NA_character_),
lb_f = if_else(is_reversible, 0, pmax(0, lowbnd)),
ub_f = if_else(is_reversible, uppbnd, uppbnd),
lb_r = if_else(is_reversible, 0, NA_real_),
ub_r = if_else(is_reversible, -lowbnd, NA_real_)
) %>%
dplyr::select(
original_reaction = abbreviation,
forward_reaction, lb_f, ub_f,
reverse_reaction, lb_r, ub_r
)
# Reshape into long irreversible reaction table
irr_long <- irr_net %>%
pivot_longer(
cols = c(forward_reaction, reverse_reaction),
names_to = "direction",
values_to = "reaction"
) %>%
filter(!is.na(reaction)) %>%
mutate(
lb = if_else(direction == "forward_reaction", lb_f, lb_r),
ub = if_else(direction == "forward_reaction", ub_f, ub_r)
) %>%
dplyr::select(reaction, lb, ub)
# Save to CSV
irr_output_path <- file.path(output_dir_projections, sprintf("irreversible_reactions_%s.csv", unique(.y$abbr)))
write_csv(irr_long, irr_output_path)
models_df %>%
dplyr::select(abbr, reactions) %>%
unnest(reactions) %>%
group_by(abbr) %>%
group_walk(~ {
# Create irreversible reaction table
irr_net <- .x %>%
mutate(
is_reversible = lowbnd < 0 & uppbnd > 0,
forward_reaction = if_else(is_reversible, paste0(abbreviation, "_f"), abbreviation),
reverse_reaction = if_else(is_reversible, paste0(abbreviation, "_r"), NA_character_),
lb_f = if_else(is_reversible, 0, pmax(0, lowbnd)),
ub_f = if_else(is_reversible, uppbnd, uppbnd),
lb_r = if_else(is_reversible, 0, NA_real_),
ub_r = if_else(is_reversible, -lowbnd, NA_real_)
) %>%
dplyr::select(
original_reaction = abbreviation,
forward_reaction, lb_f, ub_f,
reverse_reaction, lb_r, ub_r
)
# Reshape into long irreversible reaction table
irr_long <- irr_net %>%
pivot_longer(
cols = c(forward_reaction, reverse_reaction),
names_to = "direction",
values_to = "reaction"
) %>%
filter(!is.na(reaction)) %>%
mutate(
lb = if_else(direction == "forward_reaction", lb_f, lb_r),
ub = if_else(direction == "forward_reaction", ub_f, ub_r)
) %>%
dplyr::select(reaction, lb, ub)
# Save to CSV
irr_output_path <- file.path(output_dir_projections, sprintf("irreversible_reactions_%s.csv", unique(.y$abbr)))
write_csv(irr_long, irr_output_path)
cat(sprintf("  ✓ Irreversible network saved for %s: %s\n", unique(.y$abbr), irr_output_path))
})
irr_long
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
cat( capture.output(results_projection$bounds), sep = "\n" )
subdirs
source(paste0(wd, "/functions/validate_pnpro.R"))
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro_path,
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = subdirs[2],
results_projection)
subdirs[2]
file.path(wd, "functions_library", "")
file.path(wd, "petri_nets_library", "")
source(file.path(wd, "functions_library/generate_pnpro.R"))
wd <- getwd()
source(paste0(wd, "/functions_library/install_and_setup.R"))
# Load necessary scripts
sapply(c("/epimod_FBAfunctions/R/FBAgreatmodeClass.R",
"/epimod_FBAfunctions/R/class_generation.R",
"/epimod_FBAfunctions/R/readMat.R",
"/epimod_FBAfunctions/R/ex_bounds_module.R"),
function(f) source(paste0(wd, f)))
hypernode = "minimal_doublet.PNPRO"
# Create the corresponding directory inside "hypernodes/"
hypernode_dirname <- tools::file_path_sans_ext(hypernode)
full_dir_path <- file.path(wd, "hypernodes", hypernode_dirname)
if (!dir.exists(full_dir_path)) {
dir.create(full_dir_path, recursive = TRUE)
cat(sprintf("Created directory: %s\n", full_dir_path))
} else {
cat(sprintf("Directory already exists: %s\n", full_dir_path))
}
# List of subdirectory suffixes
suffixes <- c("configs", "projections", "validations", "functions", "metabolic_networks")
# Generate full paths
subdirs <- file.path(full_dir_path, paste0(suffixes, "_", hypernode_dirname))
# Create each subdirectory if not existing
for (subdir in subdirs) {
if (!dir.exists(subdir)) {
dir.create(subdir, recursive = TRUE)
cat(sprintf("Created directory: %s\n", subdir))
} else {
cat(sprintf("Directory already exists: %s\n", subdir))
}
}
# Correct path to the YAML config under new structure
cfg <- yaml::read_yaml(file.path(
wd,
"hypernodes",
"minimal_doublet",
"configs_minimal_doublet",
"config_minimal_doublet.yaml"
))
# 1) Pull out the pieces
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(
vapply(cfg$organisms, `[[`, character(1), "initial_count")
)
# Load setup_models
source(file.path(wd, "functions_library", "setup_models.R"))
# 2) Build the list (derive_abbrs() runs internally)
bacterial_models <- make_bacterial_models(
model_names    = model_names,
biomass_params = biomass_params,
pop_params     = pop_params,
initial_counts = initial_counts
)
# 3) Write out organisms_parameters_minimal_doublet.csv
write_bac_params(
bacterial_models,
file.path(
wd,
"hypernodes",
"minimal_doublet",
"configs_minimal_doublet",
"organisms_parameters_minimal_doublet.csv"
)
)
# 4) Now you have
pnpro_path       <- paste0(full_dir_path, "/", hypernode)
metabolite_places = cfg$metabolite_places
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(bacterial_models, function(model) process_model(model, hypernode_name = hypernode_dirname))
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
cat( capture.output(results_projection$bounds), sep = "\n" )
source(file.path(wd, "functions_library", "validate_pnpro.R"))
file.path(wd, "petri_nets_library", "blank.PNPRO")
hypernode_dirname
# Correct path to the YAML config under new structure
cfg <- yaml::read_yaml(file.path(
wd,
"hypernodes",
hypernode_dirname,
"configs_minimal_doublet",
"config_minimal_doublet.yaml"
))
cfg
paste0("configs_", hypernode_dirname)
paste0("organisms_parameters_", hypernode_dirname, ".csv")
file.path(wd, "hypernodes/", "organisms_parameters_",
hypernode_dirname, ".csv", "/validations_",
"organisms_parameters_", hypernode_dirname, ".csv", "/")
paste0(wd, "hypernodes/", "organisms_parameters_",
hypernode_dirname, ".csv", "/validations_",
"organisms_parameters_", hypernode_dirname, ".csv", "/")
file.path(wd, "/hypernodes/", "organisms_parameters_",
hypernode_dirname, ".csv", "/validations_",
"organisms_parameters_", hypernode_dirname, ".csv", "/")
paste0(wd, "/hypernodes/", "organisms_parameters_",
hypernode_dirname, ".csv", "/validations_",
"organisms_parameters_", hypernode_dirname, ".csv", "/")
paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
"organisms_parameters_", hypernode_dirname, ".csv", "/")
paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname, ".csv", "/")
paste0("configs_", hypernode_dirname)
paste0("config_", hypernode_dirname, ".yaml")
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname)
validation_dir
validation = validate_pnpro(pnpro_path = file.path(wd, "petri_nets_library", "blank.PNPRO"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname))
# Extract the 2nd abbreviation for each organism in order
abbrs <- map_chr(bacterial_models, ~ .x$abbreviation[2])
# ————————————————————————————————————————————
# 0) Read & parse the PNPRO
# ————————————————————————————————————————————
xml <- read_xml(pnpro_path)
pnpro_path = file.path(wd, "petri_nets_library", "blank.PNPRO")
# Extract the 2nd abbreviation for each organism in order
abbrs <- map_chr(bacterial_models, ~ .x$abbreviation[2])
# ————————————————————————————————————————————
# 0) Read & parse the PNPRO
# ————————————————————————————————————————————
xml <- read_xml(pnpro_path)
# grab all <transition> names/delays
tnodes <- xml_find_all(xml, "//transition")
t_names  <- xml_attr(tnodes, "name")
t_delays <- xml_attr(tnodes, "delay")
# build arc_df: only those arcs attached to either Call[…] or FBA[…]
is_call <- str_detect(t_delays, "^Call\\[")
is_fba  <- str_detect(t_delays, "^FBA\\[")
special <- t_names[is_call | is_fba]
special
arc_df <- xml_find_all(xml, "//arc") %>%
map_df(~{
a <- xml_attrs(.x)
tibble(
head         = a["head"],
tail         = a["tail"],
kind         = a["kind"],
multiplicity = as.integer(coalesce(a["mult"], "1"))
)
}) %>%
filter((kind=="INPUT"  & head %in% special) |
(kind=="OUTPUT" & tail %in% special)) %>%
transmute(
transition   = if_else(kind=="INPUT", head, tail),
direction    = kind,
place        = if_else(kind=="INPUT", tail, head),
multiplicity,
command      = t_delays[match(transition, t_names)]
)
validation = validate_pnpro(pnpro_path = file.path(wd, "petri_nets_library", "blank.PNPRO"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname))
paste0(wd, "/hypernodes/", hypernode_dirname)
paste0(wd, "/hypernodes/", hypernode_dirname, "metabolic_networks_minimal_doublet")
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet")
metadata_path
file.path(metadata_path, map_chr(model, ~ .x$FBAmodel))
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro_path = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname))
paste0(hypernode_dirname, ".PNPRO")
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
paste0("organisms_parameters_", hypernode_dirname, ".csv")
wd <- getwd()
source(paste0(wd, "/functions_library/install_and_setup.R"))
# Load necessary scripts
sapply(c("/epimod_FBAfunctions/R/FBAgreatmodeClass.R",
"/epimod_FBAfunctions/R/class_generation.R",
"/epimod_FBAfunctions/R/readMat.R",
"/epimod_FBAfunctions/R/ex_bounds_module.R"),
function(f) source(paste0(wd, f)))
hypernode = "minimal_doublet.PNPRO"
# Create the corresponding directory inside "hypernodes/"
hypernode_dirname <- tools::file_path_sans_ext(hypernode)
full_dir_path <- file.path(wd, "hypernodes", hypernode_dirname)
if (!dir.exists(full_dir_path)) {
dir.create(full_dir_path, recursive = TRUE)
cat(sprintf("Created directory: %s\n", full_dir_path))
} else {
cat(sprintf("Directory already exists: %s\n", full_dir_path))
}
# List of subdirectory suffixes
suffixes <- c("configs", "projections", "validations", "functions", "metabolic_networks")
# Generate full paths
subdirs <- file.path(full_dir_path, paste0(suffixes, "_", hypernode_dirname))
# Create each subdirectory if not existing
for (subdir in subdirs) {
if (!dir.exists(subdir)) {
dir.create(subdir, recursive = TRUE)
cat(sprintf("Created directory: %s\n", subdir))
} else {
cat(sprintf("Directory already exists: %s\n", subdir))
}
}
# Correct path to the YAML config under new structure
cfg <- yaml::read_yaml(file.path(
wd,
"hypernodes",
hypernode_dirname,
paste0("configs_", hypernode_dirname),
paste0("config_", hypernode_dirname, ".yaml")
))
# 1) Pull out the pieces
model_names    <- vapply(cfg$organisms, `[[`, character(1), "model_name")
biomass_params <- lapply(cfg$organisms, `[[`, "biomass")
pop_params     <- lapply(cfg$organisms, `[[`, "population")
initial_counts <- as.numeric(
vapply(cfg$organisms, `[[`, character(1), "initial_count")
)
# Load setup_models
source(file.path(wd, "functions_library", "setup_models.R"))
# 2) Build the list (derive_abbrs() runs internally)
bacterial_models <- make_bacterial_models(
model_names    = model_names,
biomass_params = biomass_params,
pop_params     = pop_params,
initial_counts = initial_counts
)
# 3) Write out organisms_parameters_<hypernode_dirname>.csv
write_bac_params(
bacterial_models,
file.path(
wd,
"hypernodes",
hypernode_dirname,
paste0("configs_", hypernode_dirname),
"organisms_parameters.csv"
)
)
# 4) Now you have
pnpro_path       <- paste0(full_dir_path, "/", hypernode)
metabolite_places = cfg$metabolite_places
source(file.path(wd, "functions_library", "process_model.R"))
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
install.packages(p, repos = "https://cloud.r-project.org", dependencies = TRUE)
# 4) Now you have
pnpro_path       <- paste0(full_dir_path, "/", hypernode)
metabolite_places = cfg$metabolite_places
source(file.path(wd, "functions_library", "process_model.R"))
process_results <- lapply(bacterial_models, function(model) process_model(model, hypernode_name = hypernode_dirname))
source(file.path(wd, "functions_library", "project_boundary_reactions.R"))
results_projection <- project_boundary_reactions(
bacterial_models   = bacterial_models,
metabolite_places  = metabolite_places,
output_dir_projections = subdirs[2]
)
cat( capture.output(results_projection$bounds), sep = "\n" )
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/net/config/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")),
pnpro_out = file.path(wd, "net/hypernode_minimal_doublet.PNPRO"))
source(file.path(wd, "functions_library", "validate_pnpro.R"))
validation = validate_pnpro(pnpro2validate = file.path(wd, "petri_nets_library", "blank.PNPRO"),
metadata_path = paste0(wd, "/hypernodes/", hypernode_dirname, "/metabolic_networks_minimal_doublet"),
bacterial_models = bacterial_models,
metabolite_places = metabolite_places,
validation_dir = paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_",
hypernode_dirname),
pnpro_name = paste0(hypernode_dirname, ".PNPRO"))
source(file.path(wd, "functions_library/generate_pnpro.R"))
paste0(wd, "/net/config/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/hypernodes", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/hypernode_minimal_doublet_arc_df_repaired.csv")
paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/", hypernode, "_arc_df_repaired.csv")
readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_hypernode_minimal_doublet/", hypernode, "_arc_df_repaired.csv"))
arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validation_data_minimal_doublet/", hypernode, "_arc_df_repaired.csv"))
arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_minimal_doublet/", hypernode, "_arc_df_repaired.csv"))
paste0(hypernode_dirname, ".PNPRO")
paste0(wd, "/hypernodes/", hypernode_dirname, hypernode_dirname, ".PNPRO")
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO")
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_minimal_doublet/", hypernode, "_arc_df_repaired.csv")),
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
hypernode_dirname
hypernode_dirname
source(file.path(wd, "functions_library/generate_pnpro.R"))
# build the PNPRO from your repaired arcs
generate_pnpro(arc_df <- readr::read_csv(paste0(wd, "/hypernodes/", hypernode_dirname, "/validations_", hypernode_dirname, "/", hypernode, "_arc_df_repaired.csv")),
pnpro_out = paste0(wd, "/hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", , "hypernodes/", hypernode_dirname, "/output.PNPRO")
paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO")
system(paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO"))
paste0("python", wd, "functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO")
system(paste0("python", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/output.PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
system(paste0("python", " ", wd, "/functions_library/render_pnpro_layout.py",
" ", "petri_nets_library/blank.PNPRO", " ", "hypernodes/", hypernode_dirname, "/", hypernode_dirname, ".PNPRO"))
